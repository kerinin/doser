// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type CalibratePumpInput struct {
	PumpID         string  `json:"pump_id"`
	TargetVolume   float64 `json:"target_volume"`
	MeasuredVolume float64 `json:"measured_volume"`
}

type CreateWaterLevelSensor struct {
	Firmata string      `json:"firmata"`
	Pin     int         `json:"pin"`
	Kind    *SensorKind `json:"kind"`
}

type NewAutoTopOff struct {
	LevelSensors  []string `json:"level_sensors"`
	Pump          string   `json:"pump"`
	FillRate      float64  `json:"fill_rate"`
	FillFrequency *string  `json:"fill_frequency"`
	MaxFillFolume *float64 `json:"max_fill_folume"`
}

type NewAutoWaterChangeInput struct {
	ExchangeRate int    `json:"exchange_rate"`
	FreshPumpID  string `json:"fresh_pump_id"`
	WastePumpID  string `json:"waste_pump_id"`
}

type NewDoserComponentInput struct {
	Pump     string  `json:"pump"`
	DoseRate float64 `json:"dose_rate"`
}

type NewDoserInput struct {
	Components []*NewDoserComponentInput `json:"components"`
}

type NewFirmataInput struct {
	SerialPort string `json:"serial_port"`
}

type NewPumpInput struct {
	FirmataID string `json:"firmata_id"`
	DeviceID  int    `json:"device_id"`
	StepPin   int    `json:"step_pin"`
	DirPin    *int   `json:"dir_pin"`
	EnPin     *int   `json:"en_pin"`
}

type SensorKind string

const (
	SensorKindLow   SensorKind = "LOW"
	SensorKindHigh  SensorKind = "HIGH"
	SensorKindAlert SensorKind = "ALERT"
)

var AllSensorKind = []SensorKind{
	SensorKindLow,
	SensorKindHigh,
	SensorKindAlert,
}

func (e SensorKind) IsValid() bool {
	switch e {
	case SensorKindLow, SensorKindHigh, SensorKindAlert:
		return true
	}
	return false
}

func (e SensorKind) String() string {
	return string(e)
}

func (e *SensorKind) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SensorKind(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SensorKind", str)
	}
	return nil
}

func (e SensorKind) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type DoserComponentInput struct {
	PumpID   string  `json:"pump_id"`
	DoseRate float64 `json:"dose_rate"`
}

type DoserInput struct {
	Components []*DoserComponentInput `json:"components"`
}

type SensorKind string

const (
	SensorKindHigh  SensorKind = "HIGH"
	SensorKindAlert SensorKind = "ALERT"
)

var AllSensorKind = []SensorKind{
	SensorKindHigh,
	SensorKindAlert,
}

func (e SensorKind) IsValid() bool {
	switch e {
	case SensorKindHigh, SensorKindAlert:
		return true
	}
	return false
}

func (e SensorKind) String() string {
	return string(e)
}

func (e *SensorKind) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SensorKind(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SensorKind", str)
	}
	return nil
}

func (e SensorKind) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

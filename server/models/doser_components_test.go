// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDoserComponents(t *testing.T) {
	t.Parallel()

	query := DoserComponents()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDoserComponentsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DoserComponent{}
	if err = randomize.Struct(seed, o, doserComponentDBTypes, true, doserComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DoserComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DoserComponents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDoserComponentsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DoserComponent{}
	if err = randomize.Struct(seed, o, doserComponentDBTypes, true, doserComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DoserComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := DoserComponents().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DoserComponents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDoserComponentsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DoserComponent{}
	if err = randomize.Struct(seed, o, doserComponentDBTypes, true, doserComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DoserComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DoserComponentSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DoserComponents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDoserComponentsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DoserComponent{}
	if err = randomize.Struct(seed, o, doserComponentDBTypes, true, doserComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DoserComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DoserComponentExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if DoserComponent exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DoserComponentExists to return true, but got false.")
	}
}

func testDoserComponentsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DoserComponent{}
	if err = randomize.Struct(seed, o, doserComponentDBTypes, true, doserComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DoserComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	doserComponentFound, err := FindDoserComponent(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if doserComponentFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDoserComponentsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DoserComponent{}
	if err = randomize.Struct(seed, o, doserComponentDBTypes, true, doserComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DoserComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = DoserComponents().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDoserComponentsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DoserComponent{}
	if err = randomize.Struct(seed, o, doserComponentDBTypes, true, doserComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DoserComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := DoserComponents().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDoserComponentsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	doserComponentOne := &DoserComponent{}
	doserComponentTwo := &DoserComponent{}
	if err = randomize.Struct(seed, doserComponentOne, doserComponentDBTypes, false, doserComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DoserComponent struct: %s", err)
	}
	if err = randomize.Struct(seed, doserComponentTwo, doserComponentDBTypes, false, doserComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DoserComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = doserComponentOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = doserComponentTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DoserComponents().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDoserComponentsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	doserComponentOne := &DoserComponent{}
	doserComponentTwo := &DoserComponent{}
	if err = randomize.Struct(seed, doserComponentOne, doserComponentDBTypes, false, doserComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DoserComponent struct: %s", err)
	}
	if err = randomize.Struct(seed, doserComponentTwo, doserComponentDBTypes, false, doserComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DoserComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = doserComponentOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = doserComponentTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DoserComponents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func doserComponentBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *DoserComponent) error {
	*o = DoserComponent{}
	return nil
}

func doserComponentAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *DoserComponent) error {
	*o = DoserComponent{}
	return nil
}

func doserComponentAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *DoserComponent) error {
	*o = DoserComponent{}
	return nil
}

func doserComponentBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DoserComponent) error {
	*o = DoserComponent{}
	return nil
}

func doserComponentAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DoserComponent) error {
	*o = DoserComponent{}
	return nil
}

func doserComponentBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DoserComponent) error {
	*o = DoserComponent{}
	return nil
}

func doserComponentAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DoserComponent) error {
	*o = DoserComponent{}
	return nil
}

func doserComponentBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DoserComponent) error {
	*o = DoserComponent{}
	return nil
}

func doserComponentAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DoserComponent) error {
	*o = DoserComponent{}
	return nil
}

func testDoserComponentsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &DoserComponent{}
	o := &DoserComponent{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, doserComponentDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DoserComponent object: %s", err)
	}

	AddDoserComponentHook(boil.BeforeInsertHook, doserComponentBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	doserComponentBeforeInsertHooks = []DoserComponentHook{}

	AddDoserComponentHook(boil.AfterInsertHook, doserComponentAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	doserComponentAfterInsertHooks = []DoserComponentHook{}

	AddDoserComponentHook(boil.AfterSelectHook, doserComponentAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	doserComponentAfterSelectHooks = []DoserComponentHook{}

	AddDoserComponentHook(boil.BeforeUpdateHook, doserComponentBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	doserComponentBeforeUpdateHooks = []DoserComponentHook{}

	AddDoserComponentHook(boil.AfterUpdateHook, doserComponentAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	doserComponentAfterUpdateHooks = []DoserComponentHook{}

	AddDoserComponentHook(boil.BeforeDeleteHook, doserComponentBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	doserComponentBeforeDeleteHooks = []DoserComponentHook{}

	AddDoserComponentHook(boil.AfterDeleteHook, doserComponentAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	doserComponentAfterDeleteHooks = []DoserComponentHook{}

	AddDoserComponentHook(boil.BeforeUpsertHook, doserComponentBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	doserComponentBeforeUpsertHooks = []DoserComponentHook{}

	AddDoserComponentHook(boil.AfterUpsertHook, doserComponentAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	doserComponentAfterUpsertHooks = []DoserComponentHook{}
}

func testDoserComponentsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DoserComponent{}
	if err = randomize.Struct(seed, o, doserComponentDBTypes, true, doserComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DoserComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DoserComponents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDoserComponentsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DoserComponent{}
	if err = randomize.Struct(seed, o, doserComponentDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DoserComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(doserComponentColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := DoserComponents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDoserComponentToOnePumpUsingPump(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DoserComponent
	var foreign Pump

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, doserComponentDBTypes, false, doserComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DoserComponent struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, pumpDBTypes, false, pumpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pump struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.PumpID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Pump().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DoserComponentSlice{&local}
	if err = local.L.LoadPump(ctx, tx, false, (*[]*DoserComponent)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Pump == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Pump = nil
	if err = local.L.LoadPump(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Pump == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDoserComponentToOneDoserUsingDoser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DoserComponent
	var foreign Doser

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, doserComponentDBTypes, false, doserComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DoserComponent struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, doserDBTypes, false, doserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Doser struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.DoserID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Doser().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DoserComponentSlice{&local}
	if err = local.L.LoadDoser(ctx, tx, false, (*[]*DoserComponent)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Doser == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Doser = nil
	if err = local.L.LoadDoser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Doser == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDoserComponentToOneSetOpPumpUsingPump(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DoserComponent
	var b, c Pump

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, doserComponentDBTypes, false, strmangle.SetComplement(doserComponentPrimaryKeyColumns, doserComponentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, pumpDBTypes, false, strmangle.SetComplement(pumpPrimaryKeyColumns, pumpColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, pumpDBTypes, false, strmangle.SetComplement(pumpPrimaryKeyColumns, pumpColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Pump{&b, &c} {
		err = a.SetPump(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Pump != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.DoserComponents[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.PumpID != x.ID {
			t.Error("foreign key was wrong value", a.PumpID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.PumpID))
		reflect.Indirect(reflect.ValueOf(&a.PumpID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.PumpID != x.ID {
			t.Error("foreign key was wrong value", a.PumpID, x.ID)
		}
	}
}
func testDoserComponentToOneSetOpDoserUsingDoser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DoserComponent
	var b, c Doser

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, doserComponentDBTypes, false, strmangle.SetComplement(doserComponentPrimaryKeyColumns, doserComponentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, doserDBTypes, false, strmangle.SetComplement(doserPrimaryKeyColumns, doserColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, doserDBTypes, false, strmangle.SetComplement(doserPrimaryKeyColumns, doserColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Doser{&b, &c} {
		err = a.SetDoser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Doser != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.DoserComponents[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.DoserID != x.ID {
			t.Error("foreign key was wrong value", a.DoserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.DoserID))
		reflect.Indirect(reflect.ValueOf(&a.DoserID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.DoserID != x.ID {
			t.Error("foreign key was wrong value", a.DoserID, x.ID)
		}
	}
}

func testDoserComponentsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DoserComponent{}
	if err = randomize.Struct(seed, o, doserComponentDBTypes, true, doserComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DoserComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDoserComponentsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DoserComponent{}
	if err = randomize.Struct(seed, o, doserComponentDBTypes, true, doserComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DoserComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DoserComponentSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDoserComponentsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DoserComponent{}
	if err = randomize.Struct(seed, o, doserComponentDBTypes, true, doserComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DoserComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DoserComponents().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	doserComponentDBTypes = map[string]string{`ID`: `UUID`, `DoserID`: `UUID`, `PumpID`: `UUID`, `DoseRate`: `REAL`}
	_                     = bytes.MinRead
)

func testDoserComponentsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(doserComponentPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(doserComponentAllColumns) == len(doserComponentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DoserComponent{}
	if err = randomize.Struct(seed, o, doserComponentDBTypes, true, doserComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DoserComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DoserComponents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, doserComponentDBTypes, true, doserComponentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DoserComponent struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDoserComponentsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(doserComponentAllColumns) == len(doserComponentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DoserComponent{}
	if err = randomize.Struct(seed, o, doserComponentDBTypes, true, doserComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DoserComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DoserComponents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, doserComponentDBTypes, true, doserComponentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DoserComponent struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(doserComponentAllColumns, doserComponentPrimaryKeyColumns) {
		fields = doserComponentAllColumns
	} else {
		fields = strmangle.SetComplement(
			doserComponentAllColumns,
			doserComponentPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DoserComponentSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

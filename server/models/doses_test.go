// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDoses(t *testing.T) {
	t.Parallel()

	query := Doses()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDosesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Dose{}
	if err = randomize.Struct(seed, o, doseDBTypes, true, doseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dose struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Doses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDosesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Dose{}
	if err = randomize.Struct(seed, o, doseDBTypes, true, doseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dose struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Doses().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Doses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDosesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Dose{}
	if err = randomize.Struct(seed, o, doseDBTypes, true, doseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dose struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DoseSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Doses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDosesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Dose{}
	if err = randomize.Struct(seed, o, doseDBTypes, true, doseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dose struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DoseExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Dose exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DoseExists to return true, but got false.")
	}
}

func testDosesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Dose{}
	if err = randomize.Struct(seed, o, doseDBTypes, true, doseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dose struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	doseFound, err := FindDose(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if doseFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDosesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Dose{}
	if err = randomize.Struct(seed, o, doseDBTypes, true, doseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dose struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Doses().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDosesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Dose{}
	if err = randomize.Struct(seed, o, doseDBTypes, true, doseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dose struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Doses().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDosesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	doseOne := &Dose{}
	doseTwo := &Dose{}
	if err = randomize.Struct(seed, doseOne, doseDBTypes, false, doseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dose struct: %s", err)
	}
	if err = randomize.Struct(seed, doseTwo, doseDBTypes, false, doseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dose struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = doseOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = doseTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Doses().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDosesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	doseOne := &Dose{}
	doseTwo := &Dose{}
	if err = randomize.Struct(seed, doseOne, doseDBTypes, false, doseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dose struct: %s", err)
	}
	if err = randomize.Struct(seed, doseTwo, doseDBTypes, false, doseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dose struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = doseOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = doseTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Doses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func doseBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Dose) error {
	*o = Dose{}
	return nil
}

func doseAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Dose) error {
	*o = Dose{}
	return nil
}

func doseAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Dose) error {
	*o = Dose{}
	return nil
}

func doseBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Dose) error {
	*o = Dose{}
	return nil
}

func doseAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Dose) error {
	*o = Dose{}
	return nil
}

func doseBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Dose) error {
	*o = Dose{}
	return nil
}

func doseAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Dose) error {
	*o = Dose{}
	return nil
}

func doseBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Dose) error {
	*o = Dose{}
	return nil
}

func doseAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Dose) error {
	*o = Dose{}
	return nil
}

func testDosesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Dose{}
	o := &Dose{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, doseDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Dose object: %s", err)
	}

	AddDoseHook(boil.BeforeInsertHook, doseBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	doseBeforeInsertHooks = []DoseHook{}

	AddDoseHook(boil.AfterInsertHook, doseAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	doseAfterInsertHooks = []DoseHook{}

	AddDoseHook(boil.AfterSelectHook, doseAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	doseAfterSelectHooks = []DoseHook{}

	AddDoseHook(boil.BeforeUpdateHook, doseBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	doseBeforeUpdateHooks = []DoseHook{}

	AddDoseHook(boil.AfterUpdateHook, doseAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	doseAfterUpdateHooks = []DoseHook{}

	AddDoseHook(boil.BeforeDeleteHook, doseBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	doseBeforeDeleteHooks = []DoseHook{}

	AddDoseHook(boil.AfterDeleteHook, doseAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	doseAfterDeleteHooks = []DoseHook{}

	AddDoseHook(boil.BeforeUpsertHook, doseBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	doseBeforeUpsertHooks = []DoseHook{}

	AddDoseHook(boil.AfterUpsertHook, doseAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	doseAfterUpsertHooks = []DoseHook{}
}

func testDosesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Dose{}
	if err = randomize.Struct(seed, o, doseDBTypes, true, doseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dose struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Doses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDosesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Dose{}
	if err = randomize.Struct(seed, o, doseDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Dose struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(doseColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Doses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDoseToOnePumpUsingPump(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Dose
	var foreign Pump

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, doseDBTypes, false, doseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dose struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, pumpDBTypes, false, pumpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pump struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.PumpID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Pump().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DoseSlice{&local}
	if err = local.L.LoadPump(ctx, tx, false, (*[]*Dose)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Pump == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Pump = nil
	if err = local.L.LoadPump(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Pump == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDoseToOneSetOpPumpUsingPump(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Dose
	var b, c Pump

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, doseDBTypes, false, strmangle.SetComplement(dosePrimaryKeyColumns, doseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, pumpDBTypes, false, strmangle.SetComplement(pumpPrimaryKeyColumns, pumpColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, pumpDBTypes, false, strmangle.SetComplement(pumpPrimaryKeyColumns, pumpColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Pump{&b, &c} {
		err = a.SetPump(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Pump != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Doses[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.PumpID != x.ID {
			t.Error("foreign key was wrong value", a.PumpID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.PumpID))
		reflect.Indirect(reflect.ValueOf(&a.PumpID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.PumpID != x.ID {
			t.Error("foreign key was wrong value", a.PumpID, x.ID)
		}
	}
}

func testDosesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Dose{}
	if err = randomize.Struct(seed, o, doseDBTypes, true, doseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dose struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDosesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Dose{}
	if err = randomize.Struct(seed, o, doseDBTypes, true, doseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dose struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DoseSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDosesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Dose{}
	if err = randomize.Struct(seed, o, doseDBTypes, true, doseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dose struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Doses().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	doseDBTypes = map[string]string{`ID`: `UUID`, `PumpID`: `UUID`, `Timestamp`: `INT`, `Volume`: `REAL`, `Message`: `STRING`}
	_           = bytes.MinRead
)

func testDosesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(dosePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(doseAllColumns) == len(dosePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Dose{}
	if err = randomize.Struct(seed, o, doseDBTypes, true, doseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dose struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Doses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, doseDBTypes, true, dosePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Dose struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDosesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(doseAllColumns) == len(dosePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Dose{}
	if err = randomize.Struct(seed, o, doseDBTypes, true, doseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dose struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Doses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, doseDBTypes, true, dosePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Dose struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(doseAllColumns, dosePrimaryKeyColumns) {
		fields = doseAllColumns
	} else {
		fields = strmangle.SetComplement(
			doseAllColumns,
			dosePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DoseSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

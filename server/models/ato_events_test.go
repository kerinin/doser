// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testAtoEvents(t *testing.T) {
	t.Parallel()

	query := AtoEvents()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testAtoEventsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AtoEvent{}
	if err = randomize.Struct(seed, o, atoEventDBTypes, true, atoEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AtoEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AtoEvents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAtoEventsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AtoEvent{}
	if err = randomize.Struct(seed, o, atoEventDBTypes, true, atoEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AtoEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := AtoEvents().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AtoEvents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAtoEventsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AtoEvent{}
	if err = randomize.Struct(seed, o, atoEventDBTypes, true, atoEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AtoEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AtoEventSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AtoEvents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAtoEventsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AtoEvent{}
	if err = randomize.Struct(seed, o, atoEventDBTypes, true, atoEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AtoEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := AtoEventExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if AtoEvent exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AtoEventExists to return true, but got false.")
	}
}

func testAtoEventsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AtoEvent{}
	if err = randomize.Struct(seed, o, atoEventDBTypes, true, atoEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AtoEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	atoEventFound, err := FindAtoEvent(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if atoEventFound == nil {
		t.Error("want a record, got nil")
	}
}

func testAtoEventsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AtoEvent{}
	if err = randomize.Struct(seed, o, atoEventDBTypes, true, atoEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AtoEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = AtoEvents().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testAtoEventsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AtoEvent{}
	if err = randomize.Struct(seed, o, atoEventDBTypes, true, atoEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AtoEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := AtoEvents().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAtoEventsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	atoEventOne := &AtoEvent{}
	atoEventTwo := &AtoEvent{}
	if err = randomize.Struct(seed, atoEventOne, atoEventDBTypes, false, atoEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AtoEvent struct: %s", err)
	}
	if err = randomize.Struct(seed, atoEventTwo, atoEventDBTypes, false, atoEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AtoEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = atoEventOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = atoEventTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AtoEvents().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAtoEventsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	atoEventOne := &AtoEvent{}
	atoEventTwo := &AtoEvent{}
	if err = randomize.Struct(seed, atoEventOne, atoEventDBTypes, false, atoEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AtoEvent struct: %s", err)
	}
	if err = randomize.Struct(seed, atoEventTwo, atoEventDBTypes, false, atoEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AtoEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = atoEventOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = atoEventTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AtoEvents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func atoEventBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *AtoEvent) error {
	*o = AtoEvent{}
	return nil
}

func atoEventAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *AtoEvent) error {
	*o = AtoEvent{}
	return nil
}

func atoEventAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *AtoEvent) error {
	*o = AtoEvent{}
	return nil
}

func atoEventBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AtoEvent) error {
	*o = AtoEvent{}
	return nil
}

func atoEventAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AtoEvent) error {
	*o = AtoEvent{}
	return nil
}

func atoEventBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AtoEvent) error {
	*o = AtoEvent{}
	return nil
}

func atoEventAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AtoEvent) error {
	*o = AtoEvent{}
	return nil
}

func atoEventBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AtoEvent) error {
	*o = AtoEvent{}
	return nil
}

func atoEventAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AtoEvent) error {
	*o = AtoEvent{}
	return nil
}

func testAtoEventsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &AtoEvent{}
	o := &AtoEvent{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, atoEventDBTypes, false); err != nil {
		t.Errorf("Unable to randomize AtoEvent object: %s", err)
	}

	AddAtoEventHook(boil.BeforeInsertHook, atoEventBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	atoEventBeforeInsertHooks = []AtoEventHook{}

	AddAtoEventHook(boil.AfterInsertHook, atoEventAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	atoEventAfterInsertHooks = []AtoEventHook{}

	AddAtoEventHook(boil.AfterSelectHook, atoEventAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	atoEventAfterSelectHooks = []AtoEventHook{}

	AddAtoEventHook(boil.BeforeUpdateHook, atoEventBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	atoEventBeforeUpdateHooks = []AtoEventHook{}

	AddAtoEventHook(boil.AfterUpdateHook, atoEventAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	atoEventAfterUpdateHooks = []AtoEventHook{}

	AddAtoEventHook(boil.BeforeDeleteHook, atoEventBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	atoEventBeforeDeleteHooks = []AtoEventHook{}

	AddAtoEventHook(boil.AfterDeleteHook, atoEventAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	atoEventAfterDeleteHooks = []AtoEventHook{}

	AddAtoEventHook(boil.BeforeUpsertHook, atoEventBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	atoEventBeforeUpsertHooks = []AtoEventHook{}

	AddAtoEventHook(boil.AfterUpsertHook, atoEventAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	atoEventAfterUpsertHooks = []AtoEventHook{}
}

func testAtoEventsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AtoEvent{}
	if err = randomize.Struct(seed, o, atoEventDBTypes, true, atoEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AtoEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AtoEvents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAtoEventsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AtoEvent{}
	if err = randomize.Struct(seed, o, atoEventDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AtoEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(atoEventColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := AtoEvents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAtoEventToOneAutoTopOffUsingAutoTopOff(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local AtoEvent
	var foreign AutoTopOff

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, atoEventDBTypes, false, atoEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AtoEvent struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, autoTopOffDBTypes, false, autoTopOffColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutoTopOff struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.AutoTopOffID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.AutoTopOff().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := AtoEventSlice{&local}
	if err = local.L.LoadAutoTopOff(ctx, tx, false, (*[]*AtoEvent)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.AutoTopOff == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.AutoTopOff = nil
	if err = local.L.LoadAutoTopOff(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.AutoTopOff == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testAtoEventToOneSetOpAutoTopOffUsingAutoTopOff(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AtoEvent
	var b, c AutoTopOff

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, atoEventDBTypes, false, strmangle.SetComplement(atoEventPrimaryKeyColumns, atoEventColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, autoTopOffDBTypes, false, strmangle.SetComplement(autoTopOffPrimaryKeyColumns, autoTopOffColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, autoTopOffDBTypes, false, strmangle.SetComplement(autoTopOffPrimaryKeyColumns, autoTopOffColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*AutoTopOff{&b, &c} {
		err = a.SetAutoTopOff(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.AutoTopOff != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.AtoEvents[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.AutoTopOffID != x.ID {
			t.Error("foreign key was wrong value", a.AutoTopOffID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.AutoTopOffID))
		reflect.Indirect(reflect.ValueOf(&a.AutoTopOffID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.AutoTopOffID != x.ID {
			t.Error("foreign key was wrong value", a.AutoTopOffID, x.ID)
		}
	}
}

func testAtoEventsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AtoEvent{}
	if err = randomize.Struct(seed, o, atoEventDBTypes, true, atoEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AtoEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAtoEventsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AtoEvent{}
	if err = randomize.Struct(seed, o, atoEventDBTypes, true, atoEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AtoEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AtoEventSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAtoEventsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AtoEvent{}
	if err = randomize.Struct(seed, o, atoEventDBTypes, true, atoEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AtoEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AtoEvents().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	atoEventDBTypes = map[string]string{`ID`: `UUID`, `AutoTopOffID`: `UUID`, `Timestamp`: `INT`, `Kind`: `STRING`, `Data`: `STRING`}
	_               = bytes.MinRead
)

func testAtoEventsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(atoEventPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(atoEventAllColumns) == len(atoEventPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AtoEvent{}
	if err = randomize.Struct(seed, o, atoEventDBTypes, true, atoEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AtoEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AtoEvents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, atoEventDBTypes, true, atoEventPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AtoEvent struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testAtoEventsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(atoEventAllColumns) == len(atoEventPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AtoEvent{}
	if err = randomize.Struct(seed, o, atoEventDBTypes, true, atoEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AtoEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AtoEvents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, atoEventDBTypes, true, atoEventPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AtoEvent struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(atoEventAllColumns, atoEventPrimaryKeyColumns) {
		fields = atoEventAllColumns
	} else {
		fields = strmangle.SetComplement(
			atoEventAllColumns,
			atoEventPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := AtoEventSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

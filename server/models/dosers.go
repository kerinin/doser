// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Doser is an object representing the database table.
type Doser struct {
	ID      string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Enabled bool        `boil:"enabled" json:"enabled" toml:"enabled" yaml:"enabled"`
	Name    null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`

	R *doserR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L doserL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DoserColumns = struct {
	ID      string
	Enabled string
	Name    string
}{
	ID:      "id",
	Enabled: "enabled",
	Name:    "name",
}

// Generated where

var DoserWhere = struct {
	ID      whereHelperstring
	Enabled whereHelperbool
	Name    whereHelpernull_String
}{
	ID:      whereHelperstring{field: "\"dosers\".\"id\""},
	Enabled: whereHelperbool{field: "\"dosers\".\"enabled\""},
	Name:    whereHelpernull_String{field: "\"dosers\".\"name\""},
}

// DoserRels is where relationship names are stored.
var DoserRels = struct {
	DoserComponents string
}{
	DoserComponents: "DoserComponents",
}

// doserR is where relationships are stored.
type doserR struct {
	DoserComponents DoserComponentSlice `boil:"DoserComponents" json:"DoserComponents" toml:"DoserComponents" yaml:"DoserComponents"`
}

// NewStruct creates a new relationship struct
func (*doserR) NewStruct() *doserR {
	return &doserR{}
}

// doserL is where Load methods for each relationship are stored.
type doserL struct{}

var (
	doserAllColumns            = []string{"id", "enabled", "name"}
	doserColumnsWithoutDefault = []string{"id", "name"}
	doserColumnsWithDefault    = []string{"enabled"}
	doserPrimaryKeyColumns     = []string{"id"}
)

type (
	// DoserSlice is an alias for a slice of pointers to Doser.
	// This should generally be used opposed to []Doser.
	DoserSlice []*Doser
	// DoserHook is the signature for custom Doser hook methods
	DoserHook func(context.Context, boil.ContextExecutor, *Doser) error

	doserQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	doserType                 = reflect.TypeOf(&Doser{})
	doserMapping              = queries.MakeStructMapping(doserType)
	doserPrimaryKeyMapping, _ = queries.BindMapping(doserType, doserMapping, doserPrimaryKeyColumns)
	doserInsertCacheMut       sync.RWMutex
	doserInsertCache          = make(map[string]insertCache)
	doserUpdateCacheMut       sync.RWMutex
	doserUpdateCache          = make(map[string]updateCache)
	doserUpsertCacheMut       sync.RWMutex
	doserUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var doserBeforeInsertHooks []DoserHook
var doserBeforeUpdateHooks []DoserHook
var doserBeforeDeleteHooks []DoserHook
var doserBeforeUpsertHooks []DoserHook

var doserAfterInsertHooks []DoserHook
var doserAfterSelectHooks []DoserHook
var doserAfterUpdateHooks []DoserHook
var doserAfterDeleteHooks []DoserHook
var doserAfterUpsertHooks []DoserHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Doser) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doserBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Doser) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doserBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Doser) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doserBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Doser) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doserBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Doser) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doserAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Doser) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doserAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Doser) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doserAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Doser) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doserAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Doser) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doserAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDoserHook registers your hook function for all future operations.
func AddDoserHook(hookPoint boil.HookPoint, doserHook DoserHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		doserBeforeInsertHooks = append(doserBeforeInsertHooks, doserHook)
	case boil.BeforeUpdateHook:
		doserBeforeUpdateHooks = append(doserBeforeUpdateHooks, doserHook)
	case boil.BeforeDeleteHook:
		doserBeforeDeleteHooks = append(doserBeforeDeleteHooks, doserHook)
	case boil.BeforeUpsertHook:
		doserBeforeUpsertHooks = append(doserBeforeUpsertHooks, doserHook)
	case boil.AfterInsertHook:
		doserAfterInsertHooks = append(doserAfterInsertHooks, doserHook)
	case boil.AfterSelectHook:
		doserAfterSelectHooks = append(doserAfterSelectHooks, doserHook)
	case boil.AfterUpdateHook:
		doserAfterUpdateHooks = append(doserAfterUpdateHooks, doserHook)
	case boil.AfterDeleteHook:
		doserAfterDeleteHooks = append(doserAfterDeleteHooks, doserHook)
	case boil.AfterUpsertHook:
		doserAfterUpsertHooks = append(doserAfterUpsertHooks, doserHook)
	}
}

// One returns a single doser record from the query.
func (q doserQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Doser, error) {
	o := &Doser{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for dosers")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Doser records from the query.
func (q doserQuery) All(ctx context.Context, exec boil.ContextExecutor) (DoserSlice, error) {
	var o []*Doser

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Doser slice")
	}

	if len(doserAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Doser records in the query.
func (q doserQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count dosers rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q doserQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if dosers exists")
	}

	return count > 0, nil
}

// DoserComponents retrieves all the doser_component's DoserComponents with an executor.
func (o *Doser) DoserComponents(mods ...qm.QueryMod) doserComponentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"doser_components\".\"doser_id\"=?", o.ID),
	)

	query := DoserComponents(queryMods...)
	queries.SetFrom(query.Query, "\"doser_components\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"doser_components\".*"})
	}

	return query
}

// LoadDoserComponents allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (doserL) LoadDoserComponents(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDoser interface{}, mods queries.Applicator) error {
	var slice []*Doser
	var object *Doser

	if singular {
		object = maybeDoser.(*Doser)
	} else {
		slice = *maybeDoser.(*[]*Doser)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &doserR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &doserR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`doser_components`),
		qm.WhereIn(`doser_components.doser_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load doser_components")
	}

	var resultSlice []*DoserComponent
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice doser_components")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on doser_components")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for doser_components")
	}

	if len(doserComponentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.DoserComponents = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &doserComponentR{}
			}
			foreign.R.Doser = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.DoserID {
				local.R.DoserComponents = append(local.R.DoserComponents, foreign)
				if foreign.R == nil {
					foreign.R = &doserComponentR{}
				}
				foreign.R.Doser = local
				break
			}
		}
	}

	return nil
}

// AddDoserComponents adds the given related objects to the existing relationships
// of the doser, optionally inserting them as new records.
// Appends related to o.R.DoserComponents.
// Sets related.R.Doser appropriately.
func (o *Doser) AddDoserComponents(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DoserComponent) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DoserID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"doser_components\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"doser_id"}),
				strmangle.WhereClause("\"", "\"", 0, doserComponentPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DoserID = o.ID
		}
	}

	if o.R == nil {
		o.R = &doserR{
			DoserComponents: related,
		}
	} else {
		o.R.DoserComponents = append(o.R.DoserComponents, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &doserComponentR{
				Doser: o,
			}
		} else {
			rel.R.Doser = o
		}
	}
	return nil
}

// Dosers retrieves all the records using an executor.
func Dosers(mods ...qm.QueryMod) doserQuery {
	mods = append(mods, qm.From("\"dosers\""))
	return doserQuery{NewQuery(mods...)}
}

// FindDoser retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDoser(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Doser, error) {
	doserObj := &Doser{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"dosers\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, doserObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from dosers")
	}

	return doserObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Doser) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no dosers provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(doserColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	doserInsertCacheMut.RLock()
	cache, cached := doserInsertCache[key]
	doserInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			doserAllColumns,
			doserColumnsWithDefault,
			doserColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(doserType, doserMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(doserType, doserMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"dosers\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"dosers\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT \"%s\" FROM \"dosers\" WHERE %s", strings.Join(returnColumns, "\",\""), strmangle.WhereClause("\"", "\"", 0, doserPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into dosers")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for dosers")
	}

CacheNoHooks:
	if !cached {
		doserInsertCacheMut.Lock()
		doserInsertCache[key] = cache
		doserInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Doser.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Doser) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	doserUpdateCacheMut.RLock()
	cache, cached := doserUpdateCache[key]
	doserUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			doserAllColumns,
			doserPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update dosers, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"dosers\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, doserPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(doserType, doserMapping, append(wl, doserPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update dosers row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for dosers")
	}

	if !cached {
		doserUpdateCacheMut.Lock()
		doserUpdateCache[key] = cache
		doserUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q doserQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for dosers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for dosers")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DoserSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), doserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"dosers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, doserPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in doser slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all doser")
	}
	return rowsAff, nil
}

// Delete deletes a single Doser record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Doser) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Doser provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), doserPrimaryKeyMapping)
	sql := "DELETE FROM \"dosers\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from dosers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for dosers")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q doserQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no doserQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from dosers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for dosers")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DoserSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(doserBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), doserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"dosers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, doserPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from doser slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for dosers")
	}

	if len(doserAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Doser) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDoser(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DoserSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DoserSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), doserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"dosers\".* FROM \"dosers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, doserPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DoserSlice")
	}

	*o = slice

	return nil
}

// DoserExists checks if the Doser row exists.
func DoserExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"dosers\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if dosers exists")
	}

	return exists, nil
}

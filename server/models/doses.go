// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Dose is an object representing the database table.
type Dose struct {
	ID        string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	PumpID    string      `boil:"pump_id" json:"pump_id" toml:"pump_id" yaml:"pump_id"`
	Timestamp int64       `boil:"timestamp" json:"timestamp" toml:"timestamp" yaml:"timestamp"`
	Volume    float64     `boil:"volume" json:"volume" toml:"volume" yaml:"volume"`
	Message   null.String `boil:"message" json:"message,omitempty" toml:"message" yaml:"message,omitempty"`

	R *doseR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L doseL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DoseColumns = struct {
	ID        string
	PumpID    string
	Timestamp string
	Volume    string
	Message   string
}{
	ID:        "id",
	PumpID:    "pump_id",
	Timestamp: "timestamp",
	Volume:    "volume",
	Message:   "message",
}

// Generated where

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var DoseWhere = struct {
	ID        whereHelperstring
	PumpID    whereHelperstring
	Timestamp whereHelperint64
	Volume    whereHelperfloat64
	Message   whereHelpernull_String
}{
	ID:        whereHelperstring{field: "\"doses\".\"id\""},
	PumpID:    whereHelperstring{field: "\"doses\".\"pump_id\""},
	Timestamp: whereHelperint64{field: "\"doses\".\"timestamp\""},
	Volume:    whereHelperfloat64{field: "\"doses\".\"volume\""},
	Message:   whereHelpernull_String{field: "\"doses\".\"message\""},
}

// DoseRels is where relationship names are stored.
var DoseRels = struct {
	Pump string
}{
	Pump: "Pump",
}

// doseR is where relationships are stored.
type doseR struct {
	Pump *Pump `boil:"Pump" json:"Pump" toml:"Pump" yaml:"Pump"`
}

// NewStruct creates a new relationship struct
func (*doseR) NewStruct() *doseR {
	return &doseR{}
}

// doseL is where Load methods for each relationship are stored.
type doseL struct{}

var (
	doseAllColumns            = []string{"id", "pump_id", "timestamp", "volume", "message"}
	doseColumnsWithoutDefault = []string{"id", "pump_id", "timestamp", "volume", "message"}
	doseColumnsWithDefault    = []string{}
	dosePrimaryKeyColumns     = []string{"id"}
)

type (
	// DoseSlice is an alias for a slice of pointers to Dose.
	// This should generally be used opposed to []Dose.
	DoseSlice []*Dose
	// DoseHook is the signature for custom Dose hook methods
	DoseHook func(context.Context, boil.ContextExecutor, *Dose) error

	doseQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	doseType                 = reflect.TypeOf(&Dose{})
	doseMapping              = queries.MakeStructMapping(doseType)
	dosePrimaryKeyMapping, _ = queries.BindMapping(doseType, doseMapping, dosePrimaryKeyColumns)
	doseInsertCacheMut       sync.RWMutex
	doseInsertCache          = make(map[string]insertCache)
	doseUpdateCacheMut       sync.RWMutex
	doseUpdateCache          = make(map[string]updateCache)
	doseUpsertCacheMut       sync.RWMutex
	doseUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var doseBeforeInsertHooks []DoseHook
var doseBeforeUpdateHooks []DoseHook
var doseBeforeDeleteHooks []DoseHook
var doseBeforeUpsertHooks []DoseHook

var doseAfterInsertHooks []DoseHook
var doseAfterSelectHooks []DoseHook
var doseAfterUpdateHooks []DoseHook
var doseAfterDeleteHooks []DoseHook
var doseAfterUpsertHooks []DoseHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Dose) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doseBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Dose) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doseBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Dose) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doseBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Dose) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doseBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Dose) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doseAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Dose) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doseAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Dose) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doseAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Dose) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doseAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Dose) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doseAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDoseHook registers your hook function for all future operations.
func AddDoseHook(hookPoint boil.HookPoint, doseHook DoseHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		doseBeforeInsertHooks = append(doseBeforeInsertHooks, doseHook)
	case boil.BeforeUpdateHook:
		doseBeforeUpdateHooks = append(doseBeforeUpdateHooks, doseHook)
	case boil.BeforeDeleteHook:
		doseBeforeDeleteHooks = append(doseBeforeDeleteHooks, doseHook)
	case boil.BeforeUpsertHook:
		doseBeforeUpsertHooks = append(doseBeforeUpsertHooks, doseHook)
	case boil.AfterInsertHook:
		doseAfterInsertHooks = append(doseAfterInsertHooks, doseHook)
	case boil.AfterSelectHook:
		doseAfterSelectHooks = append(doseAfterSelectHooks, doseHook)
	case boil.AfterUpdateHook:
		doseAfterUpdateHooks = append(doseAfterUpdateHooks, doseHook)
	case boil.AfterDeleteHook:
		doseAfterDeleteHooks = append(doseAfterDeleteHooks, doseHook)
	case boil.AfterUpsertHook:
		doseAfterUpsertHooks = append(doseAfterUpsertHooks, doseHook)
	}
}

// One returns a single dose record from the query.
func (q doseQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Dose, error) {
	o := &Dose{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for doses")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Dose records from the query.
func (q doseQuery) All(ctx context.Context, exec boil.ContextExecutor) (DoseSlice, error) {
	var o []*Dose

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Dose slice")
	}

	if len(doseAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Dose records in the query.
func (q doseQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count doses rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q doseQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if doses exists")
	}

	return count > 0, nil
}

// Pump pointed to by the foreign key.
func (o *Dose) Pump(mods ...qm.QueryMod) pumpQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PumpID),
	}

	queryMods = append(queryMods, mods...)

	query := Pumps(queryMods...)
	queries.SetFrom(query.Query, "\"pumps\"")

	return query
}

// LoadPump allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (doseL) LoadPump(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDose interface{}, mods queries.Applicator) error {
	var slice []*Dose
	var object *Dose

	if singular {
		object = maybeDose.(*Dose)
	} else {
		slice = *maybeDose.(*[]*Dose)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &doseR{}
		}
		args = append(args, object.PumpID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &doseR{}
			}

			for _, a := range args {
				if a == obj.PumpID {
					continue Outer
				}
			}

			args = append(args, obj.PumpID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`pumps`),
		qm.WhereIn(`pumps.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Pump")
	}

	var resultSlice []*Pump
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Pump")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for pumps")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for pumps")
	}

	if len(doseAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Pump = foreign
		if foreign.R == nil {
			foreign.R = &pumpR{}
		}
		foreign.R.Doses = append(foreign.R.Doses, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PumpID == foreign.ID {
				local.R.Pump = foreign
				if foreign.R == nil {
					foreign.R = &pumpR{}
				}
				foreign.R.Doses = append(foreign.R.Doses, local)
				break
			}
		}
	}

	return nil
}

// SetPump of the dose to the related item.
// Sets o.R.Pump to related.
// Adds o to related.R.Doses.
func (o *Dose) SetPump(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Pump) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"doses\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"pump_id"}),
		strmangle.WhereClause("\"", "\"", 0, dosePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PumpID = related.ID
	if o.R == nil {
		o.R = &doseR{
			Pump: related,
		}
	} else {
		o.R.Pump = related
	}

	if related.R == nil {
		related.R = &pumpR{
			Doses: DoseSlice{o},
		}
	} else {
		related.R.Doses = append(related.R.Doses, o)
	}

	return nil
}

// Doses retrieves all the records using an executor.
func Doses(mods ...qm.QueryMod) doseQuery {
	mods = append(mods, qm.From("\"doses\""))
	return doseQuery{NewQuery(mods...)}
}

// FindDose retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDose(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Dose, error) {
	doseObj := &Dose{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"doses\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, doseObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from doses")
	}

	return doseObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Dose) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no doses provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(doseColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	doseInsertCacheMut.RLock()
	cache, cached := doseInsertCache[key]
	doseInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			doseAllColumns,
			doseColumnsWithDefault,
			doseColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(doseType, doseMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(doseType, doseMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"doses\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"doses\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT \"%s\" FROM \"doses\" WHERE %s", strings.Join(returnColumns, "\",\""), strmangle.WhereClause("\"", "\"", 0, dosePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into doses")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for doses")
	}

CacheNoHooks:
	if !cached {
		doseInsertCacheMut.Lock()
		doseInsertCache[key] = cache
		doseInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Dose.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Dose) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	doseUpdateCacheMut.RLock()
	cache, cached := doseUpdateCache[key]
	doseUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			doseAllColumns,
			dosePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update doses, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"doses\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, dosePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(doseType, doseMapping, append(wl, dosePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update doses row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for doses")
	}

	if !cached {
		doseUpdateCacheMut.Lock()
		doseUpdateCache[key] = cache
		doseUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q doseQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for doses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for doses")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DoseSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dosePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"doses\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dosePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in dose slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all dose")
	}
	return rowsAff, nil
}

// Delete deletes a single Dose record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Dose) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Dose provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dosePrimaryKeyMapping)
	sql := "DELETE FROM \"doses\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from doses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for doses")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q doseQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no doseQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from doses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for doses")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DoseSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(doseBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dosePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"doses\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dosePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from dose slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for doses")
	}

	if len(doseAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Dose) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDose(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DoseSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DoseSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dosePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"doses\".* FROM \"doses\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dosePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DoseSlice")
	}

	*o = slice

	return nil
}

// DoseExists checks if the Dose row exists.
func DoseExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"doses\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if doses exists")
	}

	return exists, nil
}

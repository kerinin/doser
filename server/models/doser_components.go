// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DoserComponent is an object representing the database table.
type DoserComponent struct {
	ID       string  `boil:"id" json:"id" toml:"id" yaml:"id"`
	DoserID  string  `boil:"doser_id" json:"doser_id" toml:"doser_id" yaml:"doser_id"`
	PumpID   string  `boil:"pump_id" json:"pump_id" toml:"pump_id" yaml:"pump_id"`
	DoseRate float64 `boil:"dose_rate" json:"dose_rate" toml:"dose_rate" yaml:"dose_rate"`

	R *doserComponentR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L doserComponentL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DoserComponentColumns = struct {
	ID       string
	DoserID  string
	PumpID   string
	DoseRate string
}{
	ID:       "id",
	DoserID:  "doser_id",
	PumpID:   "pump_id",
	DoseRate: "dose_rate",
}

// Generated where

var DoserComponentWhere = struct {
	ID       whereHelperstring
	DoserID  whereHelperstring
	PumpID   whereHelperstring
	DoseRate whereHelperfloat64
}{
	ID:       whereHelperstring{field: "\"doser_components\".\"id\""},
	DoserID:  whereHelperstring{field: "\"doser_components\".\"doser_id\""},
	PumpID:   whereHelperstring{field: "\"doser_components\".\"pump_id\""},
	DoseRate: whereHelperfloat64{field: "\"doser_components\".\"dose_rate\""},
}

// DoserComponentRels is where relationship names are stored.
var DoserComponentRels = struct {
	Pump  string
	Doser string
}{
	Pump:  "Pump",
	Doser: "Doser",
}

// doserComponentR is where relationships are stored.
type doserComponentR struct {
	Pump  *Pump  `boil:"Pump" json:"Pump" toml:"Pump" yaml:"Pump"`
	Doser *Doser `boil:"Doser" json:"Doser" toml:"Doser" yaml:"Doser"`
}

// NewStruct creates a new relationship struct
func (*doserComponentR) NewStruct() *doserComponentR {
	return &doserComponentR{}
}

// doserComponentL is where Load methods for each relationship are stored.
type doserComponentL struct{}

var (
	doserComponentAllColumns            = []string{"id", "doser_id", "pump_id", "dose_rate"}
	doserComponentColumnsWithoutDefault = []string{"id", "doser_id", "pump_id", "dose_rate"}
	doserComponentColumnsWithDefault    = []string{}
	doserComponentPrimaryKeyColumns     = []string{"id"}
)

type (
	// DoserComponentSlice is an alias for a slice of pointers to DoserComponent.
	// This should generally be used opposed to []DoserComponent.
	DoserComponentSlice []*DoserComponent
	// DoserComponentHook is the signature for custom DoserComponent hook methods
	DoserComponentHook func(context.Context, boil.ContextExecutor, *DoserComponent) error

	doserComponentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	doserComponentType                 = reflect.TypeOf(&DoserComponent{})
	doserComponentMapping              = queries.MakeStructMapping(doserComponentType)
	doserComponentPrimaryKeyMapping, _ = queries.BindMapping(doserComponentType, doserComponentMapping, doserComponentPrimaryKeyColumns)
	doserComponentInsertCacheMut       sync.RWMutex
	doserComponentInsertCache          = make(map[string]insertCache)
	doserComponentUpdateCacheMut       sync.RWMutex
	doserComponentUpdateCache          = make(map[string]updateCache)
	doserComponentUpsertCacheMut       sync.RWMutex
	doserComponentUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var doserComponentBeforeInsertHooks []DoserComponentHook
var doserComponentBeforeUpdateHooks []DoserComponentHook
var doserComponentBeforeDeleteHooks []DoserComponentHook
var doserComponentBeforeUpsertHooks []DoserComponentHook

var doserComponentAfterInsertHooks []DoserComponentHook
var doserComponentAfterSelectHooks []DoserComponentHook
var doserComponentAfterUpdateHooks []DoserComponentHook
var doserComponentAfterDeleteHooks []DoserComponentHook
var doserComponentAfterUpsertHooks []DoserComponentHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DoserComponent) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doserComponentBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DoserComponent) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doserComponentBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DoserComponent) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doserComponentBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DoserComponent) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doserComponentBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DoserComponent) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doserComponentAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DoserComponent) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doserComponentAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DoserComponent) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doserComponentAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DoserComponent) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doserComponentAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DoserComponent) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doserComponentAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDoserComponentHook registers your hook function for all future operations.
func AddDoserComponentHook(hookPoint boil.HookPoint, doserComponentHook DoserComponentHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		doserComponentBeforeInsertHooks = append(doserComponentBeforeInsertHooks, doserComponentHook)
	case boil.BeforeUpdateHook:
		doserComponentBeforeUpdateHooks = append(doserComponentBeforeUpdateHooks, doserComponentHook)
	case boil.BeforeDeleteHook:
		doserComponentBeforeDeleteHooks = append(doserComponentBeforeDeleteHooks, doserComponentHook)
	case boil.BeforeUpsertHook:
		doserComponentBeforeUpsertHooks = append(doserComponentBeforeUpsertHooks, doserComponentHook)
	case boil.AfterInsertHook:
		doserComponentAfterInsertHooks = append(doserComponentAfterInsertHooks, doserComponentHook)
	case boil.AfterSelectHook:
		doserComponentAfterSelectHooks = append(doserComponentAfterSelectHooks, doserComponentHook)
	case boil.AfterUpdateHook:
		doserComponentAfterUpdateHooks = append(doserComponentAfterUpdateHooks, doserComponentHook)
	case boil.AfterDeleteHook:
		doserComponentAfterDeleteHooks = append(doserComponentAfterDeleteHooks, doserComponentHook)
	case boil.AfterUpsertHook:
		doserComponentAfterUpsertHooks = append(doserComponentAfterUpsertHooks, doserComponentHook)
	}
}

// One returns a single doserComponent record from the query.
func (q doserComponentQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DoserComponent, error) {
	o := &DoserComponent{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for doser_components")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DoserComponent records from the query.
func (q doserComponentQuery) All(ctx context.Context, exec boil.ContextExecutor) (DoserComponentSlice, error) {
	var o []*DoserComponent

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DoserComponent slice")
	}

	if len(doserComponentAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DoserComponent records in the query.
func (q doserComponentQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count doser_components rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q doserComponentQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if doser_components exists")
	}

	return count > 0, nil
}

// Pump pointed to by the foreign key.
func (o *DoserComponent) Pump(mods ...qm.QueryMod) pumpQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PumpID),
	}

	queryMods = append(queryMods, mods...)

	query := Pumps(queryMods...)
	queries.SetFrom(query.Query, "\"pumps\"")

	return query
}

// Doser pointed to by the foreign key.
func (o *DoserComponent) Doser(mods ...qm.QueryMod) doserQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.DoserID),
	}

	queryMods = append(queryMods, mods...)

	query := Dosers(queryMods...)
	queries.SetFrom(query.Query, "\"dosers\"")

	return query
}

// LoadPump allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (doserComponentL) LoadPump(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDoserComponent interface{}, mods queries.Applicator) error {
	var slice []*DoserComponent
	var object *DoserComponent

	if singular {
		object = maybeDoserComponent.(*DoserComponent)
	} else {
		slice = *maybeDoserComponent.(*[]*DoserComponent)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &doserComponentR{}
		}
		args = append(args, object.PumpID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &doserComponentR{}
			}

			for _, a := range args {
				if a == obj.PumpID {
					continue Outer
				}
			}

			args = append(args, obj.PumpID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`pumps`),
		qm.WhereIn(`pumps.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Pump")
	}

	var resultSlice []*Pump
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Pump")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for pumps")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for pumps")
	}

	if len(doserComponentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Pump = foreign
		if foreign.R == nil {
			foreign.R = &pumpR{}
		}
		foreign.R.DoserComponents = append(foreign.R.DoserComponents, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PumpID == foreign.ID {
				local.R.Pump = foreign
				if foreign.R == nil {
					foreign.R = &pumpR{}
				}
				foreign.R.DoserComponents = append(foreign.R.DoserComponents, local)
				break
			}
		}
	}

	return nil
}

// LoadDoser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (doserComponentL) LoadDoser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDoserComponent interface{}, mods queries.Applicator) error {
	var slice []*DoserComponent
	var object *DoserComponent

	if singular {
		object = maybeDoserComponent.(*DoserComponent)
	} else {
		slice = *maybeDoserComponent.(*[]*DoserComponent)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &doserComponentR{}
		}
		args = append(args, object.DoserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &doserComponentR{}
			}

			for _, a := range args {
				if a == obj.DoserID {
					continue Outer
				}
			}

			args = append(args, obj.DoserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`dosers`),
		qm.WhereIn(`dosers.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Doser")
	}

	var resultSlice []*Doser
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Doser")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for dosers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dosers")
	}

	if len(doserComponentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Doser = foreign
		if foreign.R == nil {
			foreign.R = &doserR{}
		}
		foreign.R.DoserComponents = append(foreign.R.DoserComponents, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DoserID == foreign.ID {
				local.R.Doser = foreign
				if foreign.R == nil {
					foreign.R = &doserR{}
				}
				foreign.R.DoserComponents = append(foreign.R.DoserComponents, local)
				break
			}
		}
	}

	return nil
}

// SetPump of the doserComponent to the related item.
// Sets o.R.Pump to related.
// Adds o to related.R.DoserComponents.
func (o *DoserComponent) SetPump(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Pump) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"doser_components\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"pump_id"}),
		strmangle.WhereClause("\"", "\"", 0, doserComponentPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PumpID = related.ID
	if o.R == nil {
		o.R = &doserComponentR{
			Pump: related,
		}
	} else {
		o.R.Pump = related
	}

	if related.R == nil {
		related.R = &pumpR{
			DoserComponents: DoserComponentSlice{o},
		}
	} else {
		related.R.DoserComponents = append(related.R.DoserComponents, o)
	}

	return nil
}

// SetDoser of the doserComponent to the related item.
// Sets o.R.Doser to related.
// Adds o to related.R.DoserComponents.
func (o *DoserComponent) SetDoser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Doser) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"doser_components\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"doser_id"}),
		strmangle.WhereClause("\"", "\"", 0, doserComponentPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DoserID = related.ID
	if o.R == nil {
		o.R = &doserComponentR{
			Doser: related,
		}
	} else {
		o.R.Doser = related
	}

	if related.R == nil {
		related.R = &doserR{
			DoserComponents: DoserComponentSlice{o},
		}
	} else {
		related.R.DoserComponents = append(related.R.DoserComponents, o)
	}

	return nil
}

// DoserComponents retrieves all the records using an executor.
func DoserComponents(mods ...qm.QueryMod) doserComponentQuery {
	mods = append(mods, qm.From("\"doser_components\""))
	return doserComponentQuery{NewQuery(mods...)}
}

// FindDoserComponent retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDoserComponent(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*DoserComponent, error) {
	doserComponentObj := &DoserComponent{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"doser_components\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, doserComponentObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from doser_components")
	}

	return doserComponentObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DoserComponent) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no doser_components provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(doserComponentColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	doserComponentInsertCacheMut.RLock()
	cache, cached := doserComponentInsertCache[key]
	doserComponentInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			doserComponentAllColumns,
			doserComponentColumnsWithDefault,
			doserComponentColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(doserComponentType, doserComponentMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(doserComponentType, doserComponentMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"doser_components\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"doser_components\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT \"%s\" FROM \"doser_components\" WHERE %s", strings.Join(returnColumns, "\",\""), strmangle.WhereClause("\"", "\"", 0, doserComponentPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into doser_components")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for doser_components")
	}

CacheNoHooks:
	if !cached {
		doserComponentInsertCacheMut.Lock()
		doserComponentInsertCache[key] = cache
		doserComponentInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DoserComponent.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DoserComponent) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	doserComponentUpdateCacheMut.RLock()
	cache, cached := doserComponentUpdateCache[key]
	doserComponentUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			doserComponentAllColumns,
			doserComponentPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update doser_components, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"doser_components\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, doserComponentPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(doserComponentType, doserComponentMapping, append(wl, doserComponentPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update doser_components row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for doser_components")
	}

	if !cached {
		doserComponentUpdateCacheMut.Lock()
		doserComponentUpdateCache[key] = cache
		doserComponentUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q doserComponentQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for doser_components")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for doser_components")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DoserComponentSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), doserComponentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"doser_components\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, doserComponentPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in doserComponent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all doserComponent")
	}
	return rowsAff, nil
}

// Delete deletes a single DoserComponent record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DoserComponent) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DoserComponent provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), doserComponentPrimaryKeyMapping)
	sql := "DELETE FROM \"doser_components\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from doser_components")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for doser_components")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q doserComponentQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no doserComponentQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from doser_components")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for doser_components")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DoserComponentSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(doserComponentBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), doserComponentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"doser_components\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, doserComponentPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from doserComponent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for doser_components")
	}

	if len(doserComponentAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DoserComponent) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDoserComponent(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DoserComponentSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DoserComponentSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), doserComponentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"doser_components\".* FROM \"doser_components\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, doserComponentPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DoserComponentSlice")
	}

	*o = slice

	return nil
}

// DoserComponentExists checks if the DoserComponent row exists.
func DoserComponentExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"doser_components\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if doser_components exists")
	}

	return exists, nil
}

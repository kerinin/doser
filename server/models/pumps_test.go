// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testPumps(t *testing.T) {
	t.Parallel()

	query := Pumps()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testPumpsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Pump{}
	if err = randomize.Struct(seed, o, pumpDBTypes, true, pumpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pump struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Pumps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPumpsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Pump{}
	if err = randomize.Struct(seed, o, pumpDBTypes, true, pumpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pump struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Pumps().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Pumps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPumpsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Pump{}
	if err = randomize.Struct(seed, o, pumpDBTypes, true, pumpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pump struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PumpSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Pumps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPumpsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Pump{}
	if err = randomize.Struct(seed, o, pumpDBTypes, true, pumpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pump struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := PumpExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Pump exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PumpExists to return true, but got false.")
	}
}

func testPumpsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Pump{}
	if err = randomize.Struct(seed, o, pumpDBTypes, true, pumpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pump struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	pumpFound, err := FindPump(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if pumpFound == nil {
		t.Error("want a record, got nil")
	}
}

func testPumpsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Pump{}
	if err = randomize.Struct(seed, o, pumpDBTypes, true, pumpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pump struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Pumps().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testPumpsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Pump{}
	if err = randomize.Struct(seed, o, pumpDBTypes, true, pumpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pump struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Pumps().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPumpsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	pumpOne := &Pump{}
	pumpTwo := &Pump{}
	if err = randomize.Struct(seed, pumpOne, pumpDBTypes, false, pumpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pump struct: %s", err)
	}
	if err = randomize.Struct(seed, pumpTwo, pumpDBTypes, false, pumpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pump struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = pumpOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = pumpTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Pumps().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPumpsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	pumpOne := &Pump{}
	pumpTwo := &Pump{}
	if err = randomize.Struct(seed, pumpOne, pumpDBTypes, false, pumpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pump struct: %s", err)
	}
	if err = randomize.Struct(seed, pumpTwo, pumpDBTypes, false, pumpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pump struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = pumpOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = pumpTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Pumps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func pumpBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Pump) error {
	*o = Pump{}
	return nil
}

func pumpAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Pump) error {
	*o = Pump{}
	return nil
}

func pumpAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Pump) error {
	*o = Pump{}
	return nil
}

func pumpBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Pump) error {
	*o = Pump{}
	return nil
}

func pumpAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Pump) error {
	*o = Pump{}
	return nil
}

func pumpBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Pump) error {
	*o = Pump{}
	return nil
}

func pumpAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Pump) error {
	*o = Pump{}
	return nil
}

func pumpBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Pump) error {
	*o = Pump{}
	return nil
}

func pumpAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Pump) error {
	*o = Pump{}
	return nil
}

func testPumpsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Pump{}
	o := &Pump{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, pumpDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Pump object: %s", err)
	}

	AddPumpHook(boil.BeforeInsertHook, pumpBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	pumpBeforeInsertHooks = []PumpHook{}

	AddPumpHook(boil.AfterInsertHook, pumpAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	pumpAfterInsertHooks = []PumpHook{}

	AddPumpHook(boil.AfterSelectHook, pumpAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	pumpAfterSelectHooks = []PumpHook{}

	AddPumpHook(boil.BeforeUpdateHook, pumpBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	pumpBeforeUpdateHooks = []PumpHook{}

	AddPumpHook(boil.AfterUpdateHook, pumpAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	pumpAfterUpdateHooks = []PumpHook{}

	AddPumpHook(boil.BeforeDeleteHook, pumpBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	pumpBeforeDeleteHooks = []PumpHook{}

	AddPumpHook(boil.AfterDeleteHook, pumpAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	pumpAfterDeleteHooks = []PumpHook{}

	AddPumpHook(boil.BeforeUpsertHook, pumpBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	pumpBeforeUpsertHooks = []PumpHook{}

	AddPumpHook(boil.AfterUpsertHook, pumpAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	pumpAfterUpsertHooks = []PumpHook{}
}

func testPumpsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Pump{}
	if err = randomize.Struct(seed, o, pumpDBTypes, true, pumpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pump struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Pumps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPumpsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Pump{}
	if err = randomize.Struct(seed, o, pumpDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Pump struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(pumpColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Pumps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPumpToManyAutoTopOffs(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Pump
	var b, c AutoTopOff

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pumpDBTypes, true, pumpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pump struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, autoTopOffDBTypes, false, autoTopOffColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, autoTopOffDBTypes, false, autoTopOffColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.PumpID = a.ID
	c.PumpID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.AutoTopOffs().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.PumpID == b.PumpID {
			bFound = true
		}
		if v.PumpID == c.PumpID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PumpSlice{&a}
	if err = a.L.LoadAutoTopOffs(ctx, tx, false, (*[]*Pump)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.AutoTopOffs); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.AutoTopOffs = nil
	if err = a.L.LoadAutoTopOffs(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.AutoTopOffs); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testPumpToManyWastePumpAutoWaterChanges(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Pump
	var b, c AutoWaterChange

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pumpDBTypes, true, pumpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pump struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, autoWaterChangeDBTypes, false, autoWaterChangeColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, autoWaterChangeDBTypes, false, autoWaterChangeColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.WastePumpID = a.ID
	c.WastePumpID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.WastePumpAutoWaterChanges().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.WastePumpID == b.WastePumpID {
			bFound = true
		}
		if v.WastePumpID == c.WastePumpID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PumpSlice{&a}
	if err = a.L.LoadWastePumpAutoWaterChanges(ctx, tx, false, (*[]*Pump)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.WastePumpAutoWaterChanges); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.WastePumpAutoWaterChanges = nil
	if err = a.L.LoadWastePumpAutoWaterChanges(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.WastePumpAutoWaterChanges); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testPumpToManyFreshPumpAutoWaterChanges(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Pump
	var b, c AutoWaterChange

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pumpDBTypes, true, pumpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pump struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, autoWaterChangeDBTypes, false, autoWaterChangeColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, autoWaterChangeDBTypes, false, autoWaterChangeColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.FreshPumpID = a.ID
	c.FreshPumpID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.FreshPumpAutoWaterChanges().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.FreshPumpID == b.FreshPumpID {
			bFound = true
		}
		if v.FreshPumpID == c.FreshPumpID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PumpSlice{&a}
	if err = a.L.LoadFreshPumpAutoWaterChanges(ctx, tx, false, (*[]*Pump)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.FreshPumpAutoWaterChanges); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.FreshPumpAutoWaterChanges = nil
	if err = a.L.LoadFreshPumpAutoWaterChanges(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.FreshPumpAutoWaterChanges); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testPumpToManyCalibrations(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Pump
	var b, c Calibration

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pumpDBTypes, true, pumpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pump struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, calibrationDBTypes, false, calibrationColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, calibrationDBTypes, false, calibrationColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.PumpID = a.ID
	c.PumpID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Calibrations().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.PumpID == b.PumpID {
			bFound = true
		}
		if v.PumpID == c.PumpID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PumpSlice{&a}
	if err = a.L.LoadCalibrations(ctx, tx, false, (*[]*Pump)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Calibrations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Calibrations = nil
	if err = a.L.LoadCalibrations(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Calibrations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testPumpToManyDoserComponents(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Pump
	var b, c DoserComponent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pumpDBTypes, true, pumpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pump struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, doserComponentDBTypes, false, doserComponentColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, doserComponentDBTypes, false, doserComponentColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.PumpID = a.ID
	c.PumpID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.DoserComponents().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.PumpID == b.PumpID {
			bFound = true
		}
		if v.PumpID == c.PumpID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PumpSlice{&a}
	if err = a.L.LoadDoserComponents(ctx, tx, false, (*[]*Pump)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.DoserComponents); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.DoserComponents = nil
	if err = a.L.LoadDoserComponents(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.DoserComponents); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testPumpToManyDoses(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Pump
	var b, c Dose

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pumpDBTypes, true, pumpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pump struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, doseDBTypes, false, doseColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, doseDBTypes, false, doseColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.PumpID = a.ID
	c.PumpID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Doses().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.PumpID == b.PumpID {
			bFound = true
		}
		if v.PumpID == c.PumpID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PumpSlice{&a}
	if err = a.L.LoadDoses(ctx, tx, false, (*[]*Pump)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Doses); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Doses = nil
	if err = a.L.LoadDoses(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Doses); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testPumpToManyAddOpAutoTopOffs(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Pump
	var b, c, d, e AutoTopOff

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pumpDBTypes, false, strmangle.SetComplement(pumpPrimaryKeyColumns, pumpColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AutoTopOff{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, autoTopOffDBTypes, false, strmangle.SetComplement(autoTopOffPrimaryKeyColumns, autoTopOffColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*AutoTopOff{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddAutoTopOffs(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.PumpID {
			t.Error("foreign key was wrong value", a.ID, first.PumpID)
		}
		if a.ID != second.PumpID {
			t.Error("foreign key was wrong value", a.ID, second.PumpID)
		}

		if first.R.Pump != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Pump != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.AutoTopOffs[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.AutoTopOffs[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.AutoTopOffs().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testPumpToManyAddOpWastePumpAutoWaterChanges(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Pump
	var b, c, d, e AutoWaterChange

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pumpDBTypes, false, strmangle.SetComplement(pumpPrimaryKeyColumns, pumpColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AutoWaterChange{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, autoWaterChangeDBTypes, false, strmangle.SetComplement(autoWaterChangePrimaryKeyColumns, autoWaterChangeColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*AutoWaterChange{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddWastePumpAutoWaterChanges(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.WastePumpID {
			t.Error("foreign key was wrong value", a.ID, first.WastePumpID)
		}
		if a.ID != second.WastePumpID {
			t.Error("foreign key was wrong value", a.ID, second.WastePumpID)
		}

		if first.R.WastePump != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.WastePump != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.WastePumpAutoWaterChanges[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.WastePumpAutoWaterChanges[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.WastePumpAutoWaterChanges().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testPumpToManyAddOpFreshPumpAutoWaterChanges(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Pump
	var b, c, d, e AutoWaterChange

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pumpDBTypes, false, strmangle.SetComplement(pumpPrimaryKeyColumns, pumpColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AutoWaterChange{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, autoWaterChangeDBTypes, false, strmangle.SetComplement(autoWaterChangePrimaryKeyColumns, autoWaterChangeColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*AutoWaterChange{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddFreshPumpAutoWaterChanges(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.FreshPumpID {
			t.Error("foreign key was wrong value", a.ID, first.FreshPumpID)
		}
		if a.ID != second.FreshPumpID {
			t.Error("foreign key was wrong value", a.ID, second.FreshPumpID)
		}

		if first.R.FreshPump != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.FreshPump != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.FreshPumpAutoWaterChanges[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.FreshPumpAutoWaterChanges[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.FreshPumpAutoWaterChanges().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testPumpToManyAddOpCalibrations(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Pump
	var b, c, d, e Calibration

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pumpDBTypes, false, strmangle.SetComplement(pumpPrimaryKeyColumns, pumpColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Calibration{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, calibrationDBTypes, false, strmangle.SetComplement(calibrationPrimaryKeyColumns, calibrationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Calibration{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCalibrations(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.PumpID {
			t.Error("foreign key was wrong value", a.ID, first.PumpID)
		}
		if a.ID != second.PumpID {
			t.Error("foreign key was wrong value", a.ID, second.PumpID)
		}

		if first.R.Pump != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Pump != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Calibrations[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Calibrations[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Calibrations().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testPumpToManyAddOpDoserComponents(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Pump
	var b, c, d, e DoserComponent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pumpDBTypes, false, strmangle.SetComplement(pumpPrimaryKeyColumns, pumpColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DoserComponent{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, doserComponentDBTypes, false, strmangle.SetComplement(doserComponentPrimaryKeyColumns, doserComponentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DoserComponent{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddDoserComponents(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.PumpID {
			t.Error("foreign key was wrong value", a.ID, first.PumpID)
		}
		if a.ID != second.PumpID {
			t.Error("foreign key was wrong value", a.ID, second.PumpID)
		}

		if first.R.Pump != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Pump != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.DoserComponents[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.DoserComponents[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.DoserComponents().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testPumpToManyAddOpDoses(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Pump
	var b, c, d, e Dose

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pumpDBTypes, false, strmangle.SetComplement(pumpPrimaryKeyColumns, pumpColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Dose{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, doseDBTypes, false, strmangle.SetComplement(dosePrimaryKeyColumns, doseColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Dose{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddDoses(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.PumpID {
			t.Error("foreign key was wrong value", a.ID, first.PumpID)
		}
		if a.ID != second.PumpID {
			t.Error("foreign key was wrong value", a.ID, second.PumpID)
		}

		if first.R.Pump != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Pump != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Doses[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Doses[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Doses().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testPumpToOneFirmataUsingFirmatum(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Pump
	var foreign Firmata

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, pumpDBTypes, false, pumpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pump struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, firmataDBTypes, false, firmataColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Firmata struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.FirmataID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Firmatum().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := PumpSlice{&local}
	if err = local.L.LoadFirmatum(ctx, tx, false, (*[]*Pump)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Firmatum == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Firmatum = nil
	if err = local.L.LoadFirmatum(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Firmatum == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testPumpToOneSetOpFirmataUsingFirmatum(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Pump
	var b, c Firmata

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pumpDBTypes, false, strmangle.SetComplement(pumpPrimaryKeyColumns, pumpColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, firmataDBTypes, false, strmangle.SetComplement(firmataPrimaryKeyColumns, firmataColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, firmataDBTypes, false, strmangle.SetComplement(firmataPrimaryKeyColumns, firmataColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Firmata{&b, &c} {
		err = a.SetFirmatum(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Firmatum != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.FirmatumPumps[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.FirmataID != x.ID {
			t.Error("foreign key was wrong value", a.FirmataID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.FirmataID))
		reflect.Indirect(reflect.ValueOf(&a.FirmataID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.FirmataID != x.ID {
			t.Error("foreign key was wrong value", a.FirmataID, x.ID)
		}
	}
}

func testPumpsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Pump{}
	if err = randomize.Struct(seed, o, pumpDBTypes, true, pumpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pump struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPumpsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Pump{}
	if err = randomize.Struct(seed, o, pumpDBTypes, true, pumpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pump struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PumpSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPumpsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Pump{}
	if err = randomize.Struct(seed, o, pumpDBTypes, true, pumpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pump struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Pumps().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	pumpDBTypes = map[string]string{`ID`: `UUID`, `FirmataID`: `UUID`, `DeviceID`: `INT`, `StepPin`: `INT`, `DirPin`: `INT`, `EnPin`: `INT`, `Acceleration`: `REAL`, `Name`: `TEXT`}
	_           = bytes.MinRead
)

func testPumpsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(pumpPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(pumpAllColumns) == len(pumpPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Pump{}
	if err = randomize.Struct(seed, o, pumpDBTypes, true, pumpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pump struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Pumps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, pumpDBTypes, true, pumpPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Pump struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testPumpsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(pumpAllColumns) == len(pumpPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Pump{}
	if err = randomize.Struct(seed, o, pumpDBTypes, true, pumpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pump struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Pumps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, pumpDBTypes, true, pumpPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Pump struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(pumpAllColumns, pumpPrimaryKeyColumns) {
		fields = pumpAllColumns
	} else {
		fields = strmangle.SetComplement(
			pumpAllColumns,
			pumpPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := PumpSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

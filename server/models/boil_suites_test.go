// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Calibrations", testCalibrations)
	t.Run("Firmatas", testFirmatas)
	t.Run("GorpMigrations", testGorpMigrations)
	t.Run("Pumps", testPumps)
}

func TestDelete(t *testing.T) {
	t.Run("Calibrations", testCalibrationsDelete)
	t.Run("Firmatas", testFirmatasDelete)
	t.Run("GorpMigrations", testGorpMigrationsDelete)
	t.Run("Pumps", testPumpsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Calibrations", testCalibrationsQueryDeleteAll)
	t.Run("Firmatas", testFirmatasQueryDeleteAll)
	t.Run("GorpMigrations", testGorpMigrationsQueryDeleteAll)
	t.Run("Pumps", testPumpsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Calibrations", testCalibrationsSliceDeleteAll)
	t.Run("Firmatas", testFirmatasSliceDeleteAll)
	t.Run("GorpMigrations", testGorpMigrationsSliceDeleteAll)
	t.Run("Pumps", testPumpsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Calibrations", testCalibrationsExists)
	t.Run("Firmatas", testFirmatasExists)
	t.Run("GorpMigrations", testGorpMigrationsExists)
	t.Run("Pumps", testPumpsExists)
}

func TestFind(t *testing.T) {
	t.Run("Calibrations", testCalibrationsFind)
	t.Run("Firmatas", testFirmatasFind)
	t.Run("GorpMigrations", testGorpMigrationsFind)
	t.Run("Pumps", testPumpsFind)
}

func TestBind(t *testing.T) {
	t.Run("Calibrations", testCalibrationsBind)
	t.Run("Firmatas", testFirmatasBind)
	t.Run("GorpMigrations", testGorpMigrationsBind)
	t.Run("Pumps", testPumpsBind)
}

func TestOne(t *testing.T) {
	t.Run("Calibrations", testCalibrationsOne)
	t.Run("Firmatas", testFirmatasOne)
	t.Run("GorpMigrations", testGorpMigrationsOne)
	t.Run("Pumps", testPumpsOne)
}

func TestAll(t *testing.T) {
	t.Run("Calibrations", testCalibrationsAll)
	t.Run("Firmatas", testFirmatasAll)
	t.Run("GorpMigrations", testGorpMigrationsAll)
	t.Run("Pumps", testPumpsAll)
}

func TestCount(t *testing.T) {
	t.Run("Calibrations", testCalibrationsCount)
	t.Run("Firmatas", testFirmatasCount)
	t.Run("GorpMigrations", testGorpMigrationsCount)
	t.Run("Pumps", testPumpsCount)
}

func TestHooks(t *testing.T) {
	t.Run("Calibrations", testCalibrationsHooks)
	t.Run("Firmatas", testFirmatasHooks)
	t.Run("GorpMigrations", testGorpMigrationsHooks)
	t.Run("Pumps", testPumpsHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Calibrations", testCalibrationsInsert)
	t.Run("Calibrations", testCalibrationsInsertWhitelist)
	t.Run("Firmatas", testFirmatasInsert)
	t.Run("Firmatas", testFirmatasInsertWhitelist)
	t.Run("GorpMigrations", testGorpMigrationsInsert)
	t.Run("GorpMigrations", testGorpMigrationsInsertWhitelist)
	t.Run("Pumps", testPumpsInsert)
	t.Run("Pumps", testPumpsInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("CalibrationToPumpUsingPump", testCalibrationToOnePumpUsingPump)
	t.Run("PumpToFirmataUsingFirmatum", testPumpToOneFirmataUsingFirmatum)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("FirmataToFirmatumPumps", testFirmataToManyFirmatumPumps)
	t.Run("PumpToCalibrations", testPumpToManyCalibrations)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("CalibrationToPumpUsingCalibrations", testCalibrationToOneSetOpPumpUsingPump)
	t.Run("PumpToFirmataUsingFirmatumPumps", testPumpToOneSetOpFirmataUsingFirmatum)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("FirmataToFirmatumPumps", testFirmataToManyAddOpFirmatumPumps)
	t.Run("PumpToCalibrations", testPumpToManyAddOpCalibrations)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("Calibrations", testCalibrationsReload)
	t.Run("Firmatas", testFirmatasReload)
	t.Run("GorpMigrations", testGorpMigrationsReload)
	t.Run("Pumps", testPumpsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Calibrations", testCalibrationsReloadAll)
	t.Run("Firmatas", testFirmatasReloadAll)
	t.Run("GorpMigrations", testGorpMigrationsReloadAll)
	t.Run("Pumps", testPumpsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Calibrations", testCalibrationsSelect)
	t.Run("Firmatas", testFirmatasSelect)
	t.Run("GorpMigrations", testGorpMigrationsSelect)
	t.Run("Pumps", testPumpsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Calibrations", testCalibrationsUpdate)
	t.Run("Firmatas", testFirmatasUpdate)
	t.Run("GorpMigrations", testGorpMigrationsUpdate)
	t.Run("Pumps", testPumpsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Calibrations", testCalibrationsSliceUpdateAll)
	t.Run("Firmatas", testFirmatasSliceUpdateAll)
	t.Run("GorpMigrations", testGorpMigrationsSliceUpdateAll)
	t.Run("Pumps", testPumpsSliceUpdateAll)
}

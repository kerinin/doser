// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testCalibrations(t *testing.T) {
	t.Parallel()

	query := Calibrations()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testCalibrationsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Calibration{}
	if err = randomize.Struct(seed, o, calibrationDBTypes, true, calibrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Calibration struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Calibrations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCalibrationsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Calibration{}
	if err = randomize.Struct(seed, o, calibrationDBTypes, true, calibrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Calibration struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Calibrations().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Calibrations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCalibrationsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Calibration{}
	if err = randomize.Struct(seed, o, calibrationDBTypes, true, calibrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Calibration struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CalibrationSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Calibrations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCalibrationsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Calibration{}
	if err = randomize.Struct(seed, o, calibrationDBTypes, true, calibrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Calibration struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := CalibrationExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Calibration exists: %s", err)
	}
	if !e {
		t.Errorf("Expected CalibrationExists to return true, but got false.")
	}
}

func testCalibrationsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Calibration{}
	if err = randomize.Struct(seed, o, calibrationDBTypes, true, calibrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Calibration struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	calibrationFound, err := FindCalibration(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if calibrationFound == nil {
		t.Error("want a record, got nil")
	}
}

func testCalibrationsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Calibration{}
	if err = randomize.Struct(seed, o, calibrationDBTypes, true, calibrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Calibration struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Calibrations().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testCalibrationsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Calibration{}
	if err = randomize.Struct(seed, o, calibrationDBTypes, true, calibrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Calibration struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Calibrations().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testCalibrationsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	calibrationOne := &Calibration{}
	calibrationTwo := &Calibration{}
	if err = randomize.Struct(seed, calibrationOne, calibrationDBTypes, false, calibrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Calibration struct: %s", err)
	}
	if err = randomize.Struct(seed, calibrationTwo, calibrationDBTypes, false, calibrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Calibration struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = calibrationOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = calibrationTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Calibrations().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testCalibrationsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	calibrationOne := &Calibration{}
	calibrationTwo := &Calibration{}
	if err = randomize.Struct(seed, calibrationOne, calibrationDBTypes, false, calibrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Calibration struct: %s", err)
	}
	if err = randomize.Struct(seed, calibrationTwo, calibrationDBTypes, false, calibrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Calibration struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = calibrationOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = calibrationTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Calibrations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func calibrationBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Calibration) error {
	*o = Calibration{}
	return nil
}

func calibrationAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Calibration) error {
	*o = Calibration{}
	return nil
}

func calibrationAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Calibration) error {
	*o = Calibration{}
	return nil
}

func calibrationBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Calibration) error {
	*o = Calibration{}
	return nil
}

func calibrationAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Calibration) error {
	*o = Calibration{}
	return nil
}

func calibrationBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Calibration) error {
	*o = Calibration{}
	return nil
}

func calibrationAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Calibration) error {
	*o = Calibration{}
	return nil
}

func calibrationBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Calibration) error {
	*o = Calibration{}
	return nil
}

func calibrationAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Calibration) error {
	*o = Calibration{}
	return nil
}

func testCalibrationsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Calibration{}
	o := &Calibration{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, calibrationDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Calibration object: %s", err)
	}

	AddCalibrationHook(boil.BeforeInsertHook, calibrationBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	calibrationBeforeInsertHooks = []CalibrationHook{}

	AddCalibrationHook(boil.AfterInsertHook, calibrationAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	calibrationAfterInsertHooks = []CalibrationHook{}

	AddCalibrationHook(boil.AfterSelectHook, calibrationAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	calibrationAfterSelectHooks = []CalibrationHook{}

	AddCalibrationHook(boil.BeforeUpdateHook, calibrationBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	calibrationBeforeUpdateHooks = []CalibrationHook{}

	AddCalibrationHook(boil.AfterUpdateHook, calibrationAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	calibrationAfterUpdateHooks = []CalibrationHook{}

	AddCalibrationHook(boil.BeforeDeleteHook, calibrationBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	calibrationBeforeDeleteHooks = []CalibrationHook{}

	AddCalibrationHook(boil.AfterDeleteHook, calibrationAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	calibrationAfterDeleteHooks = []CalibrationHook{}

	AddCalibrationHook(boil.BeforeUpsertHook, calibrationBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	calibrationBeforeUpsertHooks = []CalibrationHook{}

	AddCalibrationHook(boil.AfterUpsertHook, calibrationAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	calibrationAfterUpsertHooks = []CalibrationHook{}
}

func testCalibrationsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Calibration{}
	if err = randomize.Struct(seed, o, calibrationDBTypes, true, calibrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Calibration struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Calibrations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCalibrationsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Calibration{}
	if err = randomize.Struct(seed, o, calibrationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Calibration struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(calibrationColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Calibrations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCalibrationToOnePumpUsingPump(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Calibration
	var foreign Pump

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, calibrationDBTypes, false, calibrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Calibration struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, pumpDBTypes, false, pumpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pump struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.PumpID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Pump().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := CalibrationSlice{&local}
	if err = local.L.LoadPump(ctx, tx, false, (*[]*Calibration)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Pump == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Pump = nil
	if err = local.L.LoadPump(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Pump == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testCalibrationToOneSetOpPumpUsingPump(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Calibration
	var b, c Pump

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, calibrationDBTypes, false, strmangle.SetComplement(calibrationPrimaryKeyColumns, calibrationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, pumpDBTypes, false, strmangle.SetComplement(pumpPrimaryKeyColumns, pumpColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, pumpDBTypes, false, strmangle.SetComplement(pumpPrimaryKeyColumns, pumpColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Pump{&b, &c} {
		err = a.SetPump(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Pump != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Calibrations[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.PumpID != x.ID {
			t.Error("foreign key was wrong value", a.PumpID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.PumpID))
		reflect.Indirect(reflect.ValueOf(&a.PumpID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.PumpID != x.ID {
			t.Error("foreign key was wrong value", a.PumpID, x.ID)
		}
	}
}

func testCalibrationsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Calibration{}
	if err = randomize.Struct(seed, o, calibrationDBTypes, true, calibrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Calibration struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCalibrationsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Calibration{}
	if err = randomize.Struct(seed, o, calibrationDBTypes, true, calibrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Calibration struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CalibrationSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCalibrationsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Calibration{}
	if err = randomize.Struct(seed, o, calibrationDBTypes, true, calibrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Calibration struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Calibrations().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	calibrationDBTypes = map[string]string{`ID`: `UUID`, `PumpID`: `UUID`, `TargetVolume`: `REAL`, `MeasuredVolume`: `REAL`}
	_                  = bytes.MinRead
)

func testCalibrationsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(calibrationPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(calibrationAllColumns) == len(calibrationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Calibration{}
	if err = randomize.Struct(seed, o, calibrationDBTypes, true, calibrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Calibration struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Calibrations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, calibrationDBTypes, true, calibrationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Calibration struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testCalibrationsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(calibrationAllColumns) == len(calibrationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Calibration{}
	if err = randomize.Struct(seed, o, calibrationDBTypes, true, calibrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Calibration struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Calibrations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, calibrationDBTypes, true, calibrationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Calibration struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(calibrationAllColumns, calibrationPrimaryKeyColumns) {
		fields = calibrationAllColumns
	} else {
		fields = strmangle.SetComplement(
			calibrationAllColumns,
			calibrationPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := CalibrationSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

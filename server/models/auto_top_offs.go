// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AutoTopOff is an object representing the database table.
type AutoTopOff struct {
	ID            string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	PumpID        string      `boil:"pump_id" json:"pump_id" toml:"pump_id" yaml:"pump_id"`
	FillRate      float64     `boil:"fill_rate" json:"fill_rate" toml:"fill_rate" yaml:"fill_rate"`
	FillInterval  int64       `boil:"fill_interval" json:"fill_interval" toml:"fill_interval" yaml:"fill_interval"`
	MaxFillVolume float64     `boil:"max_fill_volume" json:"max_fill_volume" toml:"max_fill_volume" yaml:"max_fill_volume"`
	Enabled       bool        `boil:"enabled" json:"enabled" toml:"enabled" yaml:"enabled"`
	Name          null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`

	R *autoTopOffR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L autoTopOffL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AutoTopOffColumns = struct {
	ID            string
	PumpID        string
	FillRate      string
	FillInterval  string
	MaxFillVolume string
	Enabled       string
	Name          string
}{
	ID:            "id",
	PumpID:        "pump_id",
	FillRate:      "fill_rate",
	FillInterval:  "fill_interval",
	MaxFillVolume: "max_fill_volume",
	Enabled:       "enabled",
	Name:          "name",
}

// Generated where

type whereHelperfloat64 struct{ field string }

func (w whereHelperfloat64) EQ(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperfloat64) NEQ(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperfloat64) LT(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperfloat64) LTE(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperfloat64) GT(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperfloat64) GTE(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperfloat64) IN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperfloat64) NIN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var AutoTopOffWhere = struct {
	ID            whereHelperstring
	PumpID        whereHelperstring
	FillRate      whereHelperfloat64
	FillInterval  whereHelperint64
	MaxFillVolume whereHelperfloat64
	Enabled       whereHelperbool
	Name          whereHelpernull_String
}{
	ID:            whereHelperstring{field: "\"auto_top_offs\".\"id\""},
	PumpID:        whereHelperstring{field: "\"auto_top_offs\".\"pump_id\""},
	FillRate:      whereHelperfloat64{field: "\"auto_top_offs\".\"fill_rate\""},
	FillInterval:  whereHelperint64{field: "\"auto_top_offs\".\"fill_interval\""},
	MaxFillVolume: whereHelperfloat64{field: "\"auto_top_offs\".\"max_fill_volume\""},
	Enabled:       whereHelperbool{field: "\"auto_top_offs\".\"enabled\""},
	Name:          whereHelpernull_String{field: "\"auto_top_offs\".\"name\""},
}

// AutoTopOffRels is where relationship names are stored.
var AutoTopOffRels = struct {
	Pump              string
	AtoEvents         string
	WaterLevelSensors string
}{
	Pump:              "Pump",
	AtoEvents:         "AtoEvents",
	WaterLevelSensors: "WaterLevelSensors",
}

// autoTopOffR is where relationships are stored.
type autoTopOffR struct {
	Pump              *Pump                 `boil:"Pump" json:"Pump" toml:"Pump" yaml:"Pump"`
	AtoEvents         AtoEventSlice         `boil:"AtoEvents" json:"AtoEvents" toml:"AtoEvents" yaml:"AtoEvents"`
	WaterLevelSensors WaterLevelSensorSlice `boil:"WaterLevelSensors" json:"WaterLevelSensors" toml:"WaterLevelSensors" yaml:"WaterLevelSensors"`
}

// NewStruct creates a new relationship struct
func (*autoTopOffR) NewStruct() *autoTopOffR {
	return &autoTopOffR{}
}

// autoTopOffL is where Load methods for each relationship are stored.
type autoTopOffL struct{}

var (
	autoTopOffAllColumns            = []string{"id", "pump_id", "fill_rate", "fill_interval", "max_fill_volume", "enabled", "name"}
	autoTopOffColumnsWithoutDefault = []string{"id", "pump_id", "fill_rate", "fill_interval", "max_fill_volume", "name"}
	autoTopOffColumnsWithDefault    = []string{"enabled"}
	autoTopOffPrimaryKeyColumns     = []string{"id"}
)

type (
	// AutoTopOffSlice is an alias for a slice of pointers to AutoTopOff.
	// This should generally be used opposed to []AutoTopOff.
	AutoTopOffSlice []*AutoTopOff
	// AutoTopOffHook is the signature for custom AutoTopOff hook methods
	AutoTopOffHook func(context.Context, boil.ContextExecutor, *AutoTopOff) error

	autoTopOffQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	autoTopOffType                 = reflect.TypeOf(&AutoTopOff{})
	autoTopOffMapping              = queries.MakeStructMapping(autoTopOffType)
	autoTopOffPrimaryKeyMapping, _ = queries.BindMapping(autoTopOffType, autoTopOffMapping, autoTopOffPrimaryKeyColumns)
	autoTopOffInsertCacheMut       sync.RWMutex
	autoTopOffInsertCache          = make(map[string]insertCache)
	autoTopOffUpdateCacheMut       sync.RWMutex
	autoTopOffUpdateCache          = make(map[string]updateCache)
	autoTopOffUpsertCacheMut       sync.RWMutex
	autoTopOffUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var autoTopOffBeforeInsertHooks []AutoTopOffHook
var autoTopOffBeforeUpdateHooks []AutoTopOffHook
var autoTopOffBeforeDeleteHooks []AutoTopOffHook
var autoTopOffBeforeUpsertHooks []AutoTopOffHook

var autoTopOffAfterInsertHooks []AutoTopOffHook
var autoTopOffAfterSelectHooks []AutoTopOffHook
var autoTopOffAfterUpdateHooks []AutoTopOffHook
var autoTopOffAfterDeleteHooks []AutoTopOffHook
var autoTopOffAfterUpsertHooks []AutoTopOffHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AutoTopOff) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range autoTopOffBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AutoTopOff) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range autoTopOffBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AutoTopOff) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range autoTopOffBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AutoTopOff) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range autoTopOffBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AutoTopOff) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range autoTopOffAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AutoTopOff) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range autoTopOffAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AutoTopOff) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range autoTopOffAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AutoTopOff) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range autoTopOffAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AutoTopOff) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range autoTopOffAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAutoTopOffHook registers your hook function for all future operations.
func AddAutoTopOffHook(hookPoint boil.HookPoint, autoTopOffHook AutoTopOffHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		autoTopOffBeforeInsertHooks = append(autoTopOffBeforeInsertHooks, autoTopOffHook)
	case boil.BeforeUpdateHook:
		autoTopOffBeforeUpdateHooks = append(autoTopOffBeforeUpdateHooks, autoTopOffHook)
	case boil.BeforeDeleteHook:
		autoTopOffBeforeDeleteHooks = append(autoTopOffBeforeDeleteHooks, autoTopOffHook)
	case boil.BeforeUpsertHook:
		autoTopOffBeforeUpsertHooks = append(autoTopOffBeforeUpsertHooks, autoTopOffHook)
	case boil.AfterInsertHook:
		autoTopOffAfterInsertHooks = append(autoTopOffAfterInsertHooks, autoTopOffHook)
	case boil.AfterSelectHook:
		autoTopOffAfterSelectHooks = append(autoTopOffAfterSelectHooks, autoTopOffHook)
	case boil.AfterUpdateHook:
		autoTopOffAfterUpdateHooks = append(autoTopOffAfterUpdateHooks, autoTopOffHook)
	case boil.AfterDeleteHook:
		autoTopOffAfterDeleteHooks = append(autoTopOffAfterDeleteHooks, autoTopOffHook)
	case boil.AfterUpsertHook:
		autoTopOffAfterUpsertHooks = append(autoTopOffAfterUpsertHooks, autoTopOffHook)
	}
}

// One returns a single autoTopOff record from the query.
func (q autoTopOffQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AutoTopOff, error) {
	o := &AutoTopOff{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for auto_top_offs")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all AutoTopOff records from the query.
func (q autoTopOffQuery) All(ctx context.Context, exec boil.ContextExecutor) (AutoTopOffSlice, error) {
	var o []*AutoTopOff

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AutoTopOff slice")
	}

	if len(autoTopOffAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all AutoTopOff records in the query.
func (q autoTopOffQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count auto_top_offs rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q autoTopOffQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if auto_top_offs exists")
	}

	return count > 0, nil
}

// Pump pointed to by the foreign key.
func (o *AutoTopOff) Pump(mods ...qm.QueryMod) pumpQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PumpID),
	}

	queryMods = append(queryMods, mods...)

	query := Pumps(queryMods...)
	queries.SetFrom(query.Query, "\"pumps\"")

	return query
}

// AtoEvents retrieves all the ato_event's AtoEvents with an executor.
func (o *AutoTopOff) AtoEvents(mods ...qm.QueryMod) atoEventQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"ato_events\".\"auto_top_off_id\"=?", o.ID),
	)

	query := AtoEvents(queryMods...)
	queries.SetFrom(query.Query, "\"ato_events\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"ato_events\".*"})
	}

	return query
}

// WaterLevelSensors retrieves all the water_level_sensor's WaterLevelSensors with an executor.
func (o *AutoTopOff) WaterLevelSensors(mods ...qm.QueryMod) waterLevelSensorQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"auto_top_offs_water_level_sensors\" on \"water_level_sensors\".\"id\" = \"auto_top_offs_water_level_sensors\".\"water_level_sensor_id\""),
		qm.Where("\"auto_top_offs_water_level_sensors\".\"auto_top_off_id\"=?", o.ID),
	)

	query := WaterLevelSensors(queryMods...)
	queries.SetFrom(query.Query, "\"water_level_sensors\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"water_level_sensors\".*"})
	}

	return query
}

// LoadPump allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (autoTopOffL) LoadPump(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAutoTopOff interface{}, mods queries.Applicator) error {
	var slice []*AutoTopOff
	var object *AutoTopOff

	if singular {
		object = maybeAutoTopOff.(*AutoTopOff)
	} else {
		slice = *maybeAutoTopOff.(*[]*AutoTopOff)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &autoTopOffR{}
		}
		args = append(args, object.PumpID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &autoTopOffR{}
			}

			for _, a := range args {
				if a == obj.PumpID {
					continue Outer
				}
			}

			args = append(args, obj.PumpID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`pumps`),
		qm.WhereIn(`pumps.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Pump")
	}

	var resultSlice []*Pump
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Pump")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for pumps")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for pumps")
	}

	if len(autoTopOffAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Pump = foreign
		if foreign.R == nil {
			foreign.R = &pumpR{}
		}
		foreign.R.AutoTopOffs = append(foreign.R.AutoTopOffs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PumpID == foreign.ID {
				local.R.Pump = foreign
				if foreign.R == nil {
					foreign.R = &pumpR{}
				}
				foreign.R.AutoTopOffs = append(foreign.R.AutoTopOffs, local)
				break
			}
		}
	}

	return nil
}

// LoadAtoEvents allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (autoTopOffL) LoadAtoEvents(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAutoTopOff interface{}, mods queries.Applicator) error {
	var slice []*AutoTopOff
	var object *AutoTopOff

	if singular {
		object = maybeAutoTopOff.(*AutoTopOff)
	} else {
		slice = *maybeAutoTopOff.(*[]*AutoTopOff)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &autoTopOffR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &autoTopOffR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`ato_events`),
		qm.WhereIn(`ato_events.auto_top_off_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ato_events")
	}

	var resultSlice []*AtoEvent
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ato_events")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on ato_events")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for ato_events")
	}

	if len(atoEventAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AtoEvents = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &atoEventR{}
			}
			foreign.R.AutoTopOff = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.AutoTopOffID {
				local.R.AtoEvents = append(local.R.AtoEvents, foreign)
				if foreign.R == nil {
					foreign.R = &atoEventR{}
				}
				foreign.R.AutoTopOff = local
				break
			}
		}
	}

	return nil
}

// LoadWaterLevelSensors allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (autoTopOffL) LoadWaterLevelSensors(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAutoTopOff interface{}, mods queries.Applicator) error {
	var slice []*AutoTopOff
	var object *AutoTopOff

	if singular {
		object = maybeAutoTopOff.(*AutoTopOff)
	} else {
		slice = *maybeAutoTopOff.(*[]*AutoTopOff)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &autoTopOffR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &autoTopOffR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"water_level_sensors\".*, \"a\".\"auto_top_off_id\""),
		qm.From("\"water_level_sensors\""),
		qm.InnerJoin("\"auto_top_offs_water_level_sensors\" as \"a\" on \"water_level_sensors\".\"id\" = \"a\".\"water_level_sensor_id\""),
		qm.WhereIn("\"a\".\"auto_top_off_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load water_level_sensors")
	}

	var resultSlice []*WaterLevelSensor

	var localJoinCols []string
	for results.Next() {
		one := new(WaterLevelSensor)
		var localJoinCol string

		err = results.Scan(&one.ID, &one.FirmataID, &one.Pin, &one.Kind, &one.DetectionThreshold, &one.Invert, &one.Name, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for water_level_sensors")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice water_level_sensors")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on water_level_sensors")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for water_level_sensors")
	}

	if len(waterLevelSensorAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.WaterLevelSensors = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &waterLevelSensorR{}
			}
			foreign.R.AutoTopOffs = append(foreign.R.AutoTopOffs, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.WaterLevelSensors = append(local.R.WaterLevelSensors, foreign)
				if foreign.R == nil {
					foreign.R = &waterLevelSensorR{}
				}
				foreign.R.AutoTopOffs = append(foreign.R.AutoTopOffs, local)
				break
			}
		}
	}

	return nil
}

// SetPump of the autoTopOff to the related item.
// Sets o.R.Pump to related.
// Adds o to related.R.AutoTopOffs.
func (o *AutoTopOff) SetPump(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Pump) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"auto_top_offs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"pump_id"}),
		strmangle.WhereClause("\"", "\"", 0, autoTopOffPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PumpID = related.ID
	if o.R == nil {
		o.R = &autoTopOffR{
			Pump: related,
		}
	} else {
		o.R.Pump = related
	}

	if related.R == nil {
		related.R = &pumpR{
			AutoTopOffs: AutoTopOffSlice{o},
		}
	} else {
		related.R.AutoTopOffs = append(related.R.AutoTopOffs, o)
	}

	return nil
}

// AddAtoEvents adds the given related objects to the existing relationships
// of the auto_top_off, optionally inserting them as new records.
// Appends related to o.R.AtoEvents.
// Sets related.R.AutoTopOff appropriately.
func (o *AutoTopOff) AddAtoEvents(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AtoEvent) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.AutoTopOffID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"ato_events\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"auto_top_off_id"}),
				strmangle.WhereClause("\"", "\"", 0, atoEventPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.AutoTopOffID = o.ID
		}
	}

	if o.R == nil {
		o.R = &autoTopOffR{
			AtoEvents: related,
		}
	} else {
		o.R.AtoEvents = append(o.R.AtoEvents, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &atoEventR{
				AutoTopOff: o,
			}
		} else {
			rel.R.AutoTopOff = o
		}
	}
	return nil
}

// AddWaterLevelSensors adds the given related objects to the existing relationships
// of the auto_top_off, optionally inserting them as new records.
// Appends related to o.R.WaterLevelSensors.
// Sets related.R.AutoTopOffs appropriately.
func (o *AutoTopOff) AddWaterLevelSensors(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*WaterLevelSensor) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"auto_top_offs_water_level_sensors\" (\"auto_top_off_id\", \"water_level_sensor_id\") values (?, ?)"
		values := []interface{}{o.ID, rel.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &autoTopOffR{
			WaterLevelSensors: related,
		}
	} else {
		o.R.WaterLevelSensors = append(o.R.WaterLevelSensors, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &waterLevelSensorR{
				AutoTopOffs: AutoTopOffSlice{o},
			}
		} else {
			rel.R.AutoTopOffs = append(rel.R.AutoTopOffs, o)
		}
	}
	return nil
}

// SetWaterLevelSensors removes all previously related items of the
// auto_top_off replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.AutoTopOffs's WaterLevelSensors accordingly.
// Replaces o.R.WaterLevelSensors with related.
// Sets related.R.AutoTopOffs's WaterLevelSensors accordingly.
func (o *AutoTopOff) SetWaterLevelSensors(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*WaterLevelSensor) error {
	query := "delete from \"auto_top_offs_water_level_sensors\" where \"auto_top_off_id\" = ?"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeWaterLevelSensorsFromAutoTopOffsSlice(o, related)
	if o.R != nil {
		o.R.WaterLevelSensors = nil
	}
	return o.AddWaterLevelSensors(ctx, exec, insert, related...)
}

// RemoveWaterLevelSensors relationships from objects passed in.
// Removes related items from R.WaterLevelSensors (uses pointer comparison, removal does not keep order)
// Sets related.R.AutoTopOffs.
func (o *AutoTopOff) RemoveWaterLevelSensors(ctx context.Context, exec boil.ContextExecutor, related ...*WaterLevelSensor) error {
	var err error
	query := fmt.Sprintf(
		"delete from \"auto_top_offs_water_level_sensors\" where \"auto_top_off_id\" = ? and \"water_level_sensor_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeWaterLevelSensorsFromAutoTopOffsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.WaterLevelSensors {
			if rel != ri {
				continue
			}

			ln := len(o.R.WaterLevelSensors)
			if ln > 1 && i < ln-1 {
				o.R.WaterLevelSensors[i] = o.R.WaterLevelSensors[ln-1]
			}
			o.R.WaterLevelSensors = o.R.WaterLevelSensors[:ln-1]
			break
		}
	}

	return nil
}

func removeWaterLevelSensorsFromAutoTopOffsSlice(o *AutoTopOff, related []*WaterLevelSensor) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.AutoTopOffs {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.AutoTopOffs)
			if ln > 1 && i < ln-1 {
				rel.R.AutoTopOffs[i] = rel.R.AutoTopOffs[ln-1]
			}
			rel.R.AutoTopOffs = rel.R.AutoTopOffs[:ln-1]
			break
		}
	}
}

// AutoTopOffs retrieves all the records using an executor.
func AutoTopOffs(mods ...qm.QueryMod) autoTopOffQuery {
	mods = append(mods, qm.From("\"auto_top_offs\""))
	return autoTopOffQuery{NewQuery(mods...)}
}

// FindAutoTopOff retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAutoTopOff(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*AutoTopOff, error) {
	autoTopOffObj := &AutoTopOff{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"auto_top_offs\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, autoTopOffObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from auto_top_offs")
	}

	return autoTopOffObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AutoTopOff) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no auto_top_offs provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(autoTopOffColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	autoTopOffInsertCacheMut.RLock()
	cache, cached := autoTopOffInsertCache[key]
	autoTopOffInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			autoTopOffAllColumns,
			autoTopOffColumnsWithDefault,
			autoTopOffColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(autoTopOffType, autoTopOffMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(autoTopOffType, autoTopOffMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"auto_top_offs\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"auto_top_offs\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT \"%s\" FROM \"auto_top_offs\" WHERE %s", strings.Join(returnColumns, "\",\""), strmangle.WhereClause("\"", "\"", 0, autoTopOffPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into auto_top_offs")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for auto_top_offs")
	}

CacheNoHooks:
	if !cached {
		autoTopOffInsertCacheMut.Lock()
		autoTopOffInsertCache[key] = cache
		autoTopOffInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the AutoTopOff.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AutoTopOff) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	autoTopOffUpdateCacheMut.RLock()
	cache, cached := autoTopOffUpdateCache[key]
	autoTopOffUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			autoTopOffAllColumns,
			autoTopOffPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update auto_top_offs, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"auto_top_offs\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, autoTopOffPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(autoTopOffType, autoTopOffMapping, append(wl, autoTopOffPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update auto_top_offs row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for auto_top_offs")
	}

	if !cached {
		autoTopOffUpdateCacheMut.Lock()
		autoTopOffUpdateCache[key] = cache
		autoTopOffUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q autoTopOffQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for auto_top_offs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for auto_top_offs")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AutoTopOffSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), autoTopOffPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"auto_top_offs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, autoTopOffPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in autoTopOff slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all autoTopOff")
	}
	return rowsAff, nil
}

// Delete deletes a single AutoTopOff record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AutoTopOff) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AutoTopOff provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), autoTopOffPrimaryKeyMapping)
	sql := "DELETE FROM \"auto_top_offs\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from auto_top_offs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for auto_top_offs")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q autoTopOffQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no autoTopOffQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from auto_top_offs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for auto_top_offs")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AutoTopOffSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(autoTopOffBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), autoTopOffPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"auto_top_offs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, autoTopOffPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from autoTopOff slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for auto_top_offs")
	}

	if len(autoTopOffAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AutoTopOff) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAutoTopOff(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AutoTopOffSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AutoTopOffSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), autoTopOffPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"auto_top_offs\".* FROM \"auto_top_offs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, autoTopOffPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AutoTopOffSlice")
	}

	*o = slice

	return nil
}

// AutoTopOffExists checks if the AutoTopOff row exists.
func AutoTopOffExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"auto_top_offs\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if auto_top_offs exists")
	}

	return exists, nil
}

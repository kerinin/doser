// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Pump is an object representing the database table.
type Pump struct {
	ID           string       `boil:"id" json:"id" toml:"id" yaml:"id"`
	FirmataID    string       `boil:"firmata_id" json:"firmata_id" toml:"firmata_id" yaml:"firmata_id"`
	DeviceID     int64        `boil:"device_id" json:"device_id" toml:"device_id" yaml:"device_id"`
	StepPin      int64        `boil:"step_pin" json:"step_pin" toml:"step_pin" yaml:"step_pin"`
	DirPin       null.Int64   `boil:"dir_pin" json:"dir_pin,omitempty" toml:"dir_pin" yaml:"dir_pin,omitempty"`
	EnPin        null.Int64   `boil:"en_pin" json:"en_pin,omitempty" toml:"en_pin" yaml:"en_pin,omitempty"`
	Acceleration null.Float64 `boil:"acceleration" json:"acceleration,omitempty" toml:"acceleration" yaml:"acceleration,omitempty"`
	Name         null.String  `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`

	R *pumpR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L pumpL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PumpColumns = struct {
	ID           string
	FirmataID    string
	DeviceID     string
	StepPin      string
	DirPin       string
	EnPin        string
	Acceleration string
	Name         string
}{
	ID:           "id",
	FirmataID:    "firmata_id",
	DeviceID:     "device_id",
	StepPin:      "step_pin",
	DirPin:       "dir_pin",
	EnPin:        "en_pin",
	Acceleration: "acceleration",
	Name:         "name",
}

// Generated where

type whereHelpernull_Int64 struct{ field string }

func (w whereHelpernull_Int64) EQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int64) NEQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Int64) LT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int64) LTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int64) GT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int64) GTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Float64 struct{ field string }

func (w whereHelpernull_Float64) EQ(x null.Float64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Float64) NEQ(x null.Float64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Float64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Float64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Float64) LT(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Float64) LTE(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Float64) GT(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Float64) GTE(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var PumpWhere = struct {
	ID           whereHelperstring
	FirmataID    whereHelperstring
	DeviceID     whereHelperint64
	StepPin      whereHelperint64
	DirPin       whereHelpernull_Int64
	EnPin        whereHelpernull_Int64
	Acceleration whereHelpernull_Float64
	Name         whereHelpernull_String
}{
	ID:           whereHelperstring{field: "\"pumps\".\"id\""},
	FirmataID:    whereHelperstring{field: "\"pumps\".\"firmata_id\""},
	DeviceID:     whereHelperint64{field: "\"pumps\".\"device_id\""},
	StepPin:      whereHelperint64{field: "\"pumps\".\"step_pin\""},
	DirPin:       whereHelpernull_Int64{field: "\"pumps\".\"dir_pin\""},
	EnPin:        whereHelpernull_Int64{field: "\"pumps\".\"en_pin\""},
	Acceleration: whereHelpernull_Float64{field: "\"pumps\".\"acceleration\""},
	Name:         whereHelpernull_String{field: "\"pumps\".\"name\""},
}

// PumpRels is where relationship names are stored.
var PumpRels = struct {
	Firmatum                  string
	AutoTopOffs               string
	WastePumpAutoWaterChanges string
	FreshPumpAutoWaterChanges string
	Calibrations              string
	DoserComponents           string
	Doses                     string
}{
	Firmatum:                  "Firmatum",
	AutoTopOffs:               "AutoTopOffs",
	WastePumpAutoWaterChanges: "WastePumpAutoWaterChanges",
	FreshPumpAutoWaterChanges: "FreshPumpAutoWaterChanges",
	Calibrations:              "Calibrations",
	DoserComponents:           "DoserComponents",
	Doses:                     "Doses",
}

// pumpR is where relationships are stored.
type pumpR struct {
	Firmatum                  *Firmata             `boil:"Firmatum" json:"Firmatum" toml:"Firmatum" yaml:"Firmatum"`
	AutoTopOffs               AutoTopOffSlice      `boil:"AutoTopOffs" json:"AutoTopOffs" toml:"AutoTopOffs" yaml:"AutoTopOffs"`
	WastePumpAutoWaterChanges AutoWaterChangeSlice `boil:"WastePumpAutoWaterChanges" json:"WastePumpAutoWaterChanges" toml:"WastePumpAutoWaterChanges" yaml:"WastePumpAutoWaterChanges"`
	FreshPumpAutoWaterChanges AutoWaterChangeSlice `boil:"FreshPumpAutoWaterChanges" json:"FreshPumpAutoWaterChanges" toml:"FreshPumpAutoWaterChanges" yaml:"FreshPumpAutoWaterChanges"`
	Calibrations              CalibrationSlice     `boil:"Calibrations" json:"Calibrations" toml:"Calibrations" yaml:"Calibrations"`
	DoserComponents           DoserComponentSlice  `boil:"DoserComponents" json:"DoserComponents" toml:"DoserComponents" yaml:"DoserComponents"`
	Doses                     DoseSlice            `boil:"Doses" json:"Doses" toml:"Doses" yaml:"Doses"`
}

// NewStruct creates a new relationship struct
func (*pumpR) NewStruct() *pumpR {
	return &pumpR{}
}

// pumpL is where Load methods for each relationship are stored.
type pumpL struct{}

var (
	pumpAllColumns            = []string{"id", "firmata_id", "device_id", "step_pin", "dir_pin", "en_pin", "acceleration", "name"}
	pumpColumnsWithoutDefault = []string{"id", "firmata_id", "device_id", "step_pin", "dir_pin", "en_pin", "acceleration", "name"}
	pumpColumnsWithDefault    = []string{}
	pumpPrimaryKeyColumns     = []string{"id"}
)

type (
	// PumpSlice is an alias for a slice of pointers to Pump.
	// This should generally be used opposed to []Pump.
	PumpSlice []*Pump
	// PumpHook is the signature for custom Pump hook methods
	PumpHook func(context.Context, boil.ContextExecutor, *Pump) error

	pumpQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	pumpType                 = reflect.TypeOf(&Pump{})
	pumpMapping              = queries.MakeStructMapping(pumpType)
	pumpPrimaryKeyMapping, _ = queries.BindMapping(pumpType, pumpMapping, pumpPrimaryKeyColumns)
	pumpInsertCacheMut       sync.RWMutex
	pumpInsertCache          = make(map[string]insertCache)
	pumpUpdateCacheMut       sync.RWMutex
	pumpUpdateCache          = make(map[string]updateCache)
	pumpUpsertCacheMut       sync.RWMutex
	pumpUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var pumpBeforeInsertHooks []PumpHook
var pumpBeforeUpdateHooks []PumpHook
var pumpBeforeDeleteHooks []PumpHook
var pumpBeforeUpsertHooks []PumpHook

var pumpAfterInsertHooks []PumpHook
var pumpAfterSelectHooks []PumpHook
var pumpAfterUpdateHooks []PumpHook
var pumpAfterDeleteHooks []PumpHook
var pumpAfterUpsertHooks []PumpHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Pump) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pumpBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Pump) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pumpBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Pump) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pumpBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Pump) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pumpBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Pump) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pumpAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Pump) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pumpAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Pump) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pumpAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Pump) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pumpAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Pump) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pumpAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPumpHook registers your hook function for all future operations.
func AddPumpHook(hookPoint boil.HookPoint, pumpHook PumpHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		pumpBeforeInsertHooks = append(pumpBeforeInsertHooks, pumpHook)
	case boil.BeforeUpdateHook:
		pumpBeforeUpdateHooks = append(pumpBeforeUpdateHooks, pumpHook)
	case boil.BeforeDeleteHook:
		pumpBeforeDeleteHooks = append(pumpBeforeDeleteHooks, pumpHook)
	case boil.BeforeUpsertHook:
		pumpBeforeUpsertHooks = append(pumpBeforeUpsertHooks, pumpHook)
	case boil.AfterInsertHook:
		pumpAfterInsertHooks = append(pumpAfterInsertHooks, pumpHook)
	case boil.AfterSelectHook:
		pumpAfterSelectHooks = append(pumpAfterSelectHooks, pumpHook)
	case boil.AfterUpdateHook:
		pumpAfterUpdateHooks = append(pumpAfterUpdateHooks, pumpHook)
	case boil.AfterDeleteHook:
		pumpAfterDeleteHooks = append(pumpAfterDeleteHooks, pumpHook)
	case boil.AfterUpsertHook:
		pumpAfterUpsertHooks = append(pumpAfterUpsertHooks, pumpHook)
	}
}

// One returns a single pump record from the query.
func (q pumpQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Pump, error) {
	o := &Pump{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for pumps")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Pump records from the query.
func (q pumpQuery) All(ctx context.Context, exec boil.ContextExecutor) (PumpSlice, error) {
	var o []*Pump

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Pump slice")
	}

	if len(pumpAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Pump records in the query.
func (q pumpQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count pumps rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q pumpQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if pumps exists")
	}

	return count > 0, nil
}

// Firmatum pointed to by the foreign key.
func (o *Pump) Firmatum(mods ...qm.QueryMod) firmataQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.FirmataID),
	}

	queryMods = append(queryMods, mods...)

	query := Firmatas(queryMods...)
	queries.SetFrom(query.Query, "\"firmatas\"")

	return query
}

// AutoTopOffs retrieves all the auto_top_off's AutoTopOffs with an executor.
func (o *Pump) AutoTopOffs(mods ...qm.QueryMod) autoTopOffQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"auto_top_offs\".\"pump_id\"=?", o.ID),
	)

	query := AutoTopOffs(queryMods...)
	queries.SetFrom(query.Query, "\"auto_top_offs\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"auto_top_offs\".*"})
	}

	return query
}

// WastePumpAutoWaterChanges retrieves all the auto_water_change's AutoWaterChanges with an executor via waste_pump_id column.
func (o *Pump) WastePumpAutoWaterChanges(mods ...qm.QueryMod) autoWaterChangeQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"auto_water_changes\".\"waste_pump_id\"=?", o.ID),
	)

	query := AutoWaterChanges(queryMods...)
	queries.SetFrom(query.Query, "\"auto_water_changes\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"auto_water_changes\".*"})
	}

	return query
}

// FreshPumpAutoWaterChanges retrieves all the auto_water_change's AutoWaterChanges with an executor via fresh_pump_id column.
func (o *Pump) FreshPumpAutoWaterChanges(mods ...qm.QueryMod) autoWaterChangeQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"auto_water_changes\".\"fresh_pump_id\"=?", o.ID),
	)

	query := AutoWaterChanges(queryMods...)
	queries.SetFrom(query.Query, "\"auto_water_changes\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"auto_water_changes\".*"})
	}

	return query
}

// Calibrations retrieves all the calibration's Calibrations with an executor.
func (o *Pump) Calibrations(mods ...qm.QueryMod) calibrationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"calibrations\".\"pump_id\"=?", o.ID),
	)

	query := Calibrations(queryMods...)
	queries.SetFrom(query.Query, "\"calibrations\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"calibrations\".*"})
	}

	return query
}

// DoserComponents retrieves all the doser_component's DoserComponents with an executor.
func (o *Pump) DoserComponents(mods ...qm.QueryMod) doserComponentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"doser_components\".\"pump_id\"=?", o.ID),
	)

	query := DoserComponents(queryMods...)
	queries.SetFrom(query.Query, "\"doser_components\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"doser_components\".*"})
	}

	return query
}

// Doses retrieves all the dose's Doses with an executor.
func (o *Pump) Doses(mods ...qm.QueryMod) doseQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"doses\".\"pump_id\"=?", o.ID),
	)

	query := Doses(queryMods...)
	queries.SetFrom(query.Query, "\"doses\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"doses\".*"})
	}

	return query
}

// LoadFirmatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (pumpL) LoadFirmatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybePump interface{}, mods queries.Applicator) error {
	var slice []*Pump
	var object *Pump

	if singular {
		object = maybePump.(*Pump)
	} else {
		slice = *maybePump.(*[]*Pump)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pumpR{}
		}
		args = append(args, object.FirmataID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pumpR{}
			}

			for _, a := range args {
				if a == obj.FirmataID {
					continue Outer
				}
			}

			args = append(args, obj.FirmataID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`firmatas`),
		qm.WhereIn(`firmatas.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Firmata")
	}

	var resultSlice []*Firmata
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Firmata")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for firmatas")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for firmatas")
	}

	if len(pumpAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Firmatum = foreign
		if foreign.R == nil {
			foreign.R = &firmataR{}
		}
		foreign.R.FirmatumPumps = append(foreign.R.FirmatumPumps, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FirmataID == foreign.ID {
				local.R.Firmatum = foreign
				if foreign.R == nil {
					foreign.R = &firmataR{}
				}
				foreign.R.FirmatumPumps = append(foreign.R.FirmatumPumps, local)
				break
			}
		}
	}

	return nil
}

// LoadAutoTopOffs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (pumpL) LoadAutoTopOffs(ctx context.Context, e boil.ContextExecutor, singular bool, maybePump interface{}, mods queries.Applicator) error {
	var slice []*Pump
	var object *Pump

	if singular {
		object = maybePump.(*Pump)
	} else {
		slice = *maybePump.(*[]*Pump)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pumpR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pumpR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`auto_top_offs`),
		qm.WhereIn(`auto_top_offs.pump_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load auto_top_offs")
	}

	var resultSlice []*AutoTopOff
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice auto_top_offs")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on auto_top_offs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for auto_top_offs")
	}

	if len(autoTopOffAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AutoTopOffs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &autoTopOffR{}
			}
			foreign.R.Pump = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.PumpID {
				local.R.AutoTopOffs = append(local.R.AutoTopOffs, foreign)
				if foreign.R == nil {
					foreign.R = &autoTopOffR{}
				}
				foreign.R.Pump = local
				break
			}
		}
	}

	return nil
}

// LoadWastePumpAutoWaterChanges allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (pumpL) LoadWastePumpAutoWaterChanges(ctx context.Context, e boil.ContextExecutor, singular bool, maybePump interface{}, mods queries.Applicator) error {
	var slice []*Pump
	var object *Pump

	if singular {
		object = maybePump.(*Pump)
	} else {
		slice = *maybePump.(*[]*Pump)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pumpR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pumpR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`auto_water_changes`),
		qm.WhereIn(`auto_water_changes.waste_pump_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load auto_water_changes")
	}

	var resultSlice []*AutoWaterChange
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice auto_water_changes")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on auto_water_changes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for auto_water_changes")
	}

	if len(autoWaterChangeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.WastePumpAutoWaterChanges = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &autoWaterChangeR{}
			}
			foreign.R.WastePump = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.WastePumpID {
				local.R.WastePumpAutoWaterChanges = append(local.R.WastePumpAutoWaterChanges, foreign)
				if foreign.R == nil {
					foreign.R = &autoWaterChangeR{}
				}
				foreign.R.WastePump = local
				break
			}
		}
	}

	return nil
}

// LoadFreshPumpAutoWaterChanges allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (pumpL) LoadFreshPumpAutoWaterChanges(ctx context.Context, e boil.ContextExecutor, singular bool, maybePump interface{}, mods queries.Applicator) error {
	var slice []*Pump
	var object *Pump

	if singular {
		object = maybePump.(*Pump)
	} else {
		slice = *maybePump.(*[]*Pump)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pumpR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pumpR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`auto_water_changes`),
		qm.WhereIn(`auto_water_changes.fresh_pump_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load auto_water_changes")
	}

	var resultSlice []*AutoWaterChange
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice auto_water_changes")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on auto_water_changes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for auto_water_changes")
	}

	if len(autoWaterChangeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.FreshPumpAutoWaterChanges = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &autoWaterChangeR{}
			}
			foreign.R.FreshPump = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.FreshPumpID {
				local.R.FreshPumpAutoWaterChanges = append(local.R.FreshPumpAutoWaterChanges, foreign)
				if foreign.R == nil {
					foreign.R = &autoWaterChangeR{}
				}
				foreign.R.FreshPump = local
				break
			}
		}
	}

	return nil
}

// LoadCalibrations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (pumpL) LoadCalibrations(ctx context.Context, e boil.ContextExecutor, singular bool, maybePump interface{}, mods queries.Applicator) error {
	var slice []*Pump
	var object *Pump

	if singular {
		object = maybePump.(*Pump)
	} else {
		slice = *maybePump.(*[]*Pump)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pumpR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pumpR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`calibrations`),
		qm.WhereIn(`calibrations.pump_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load calibrations")
	}

	var resultSlice []*Calibration
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice calibrations")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on calibrations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for calibrations")
	}

	if len(calibrationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Calibrations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &calibrationR{}
			}
			foreign.R.Pump = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.PumpID {
				local.R.Calibrations = append(local.R.Calibrations, foreign)
				if foreign.R == nil {
					foreign.R = &calibrationR{}
				}
				foreign.R.Pump = local
				break
			}
		}
	}

	return nil
}

// LoadDoserComponents allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (pumpL) LoadDoserComponents(ctx context.Context, e boil.ContextExecutor, singular bool, maybePump interface{}, mods queries.Applicator) error {
	var slice []*Pump
	var object *Pump

	if singular {
		object = maybePump.(*Pump)
	} else {
		slice = *maybePump.(*[]*Pump)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pumpR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pumpR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`doser_components`),
		qm.WhereIn(`doser_components.pump_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load doser_components")
	}

	var resultSlice []*DoserComponent
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice doser_components")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on doser_components")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for doser_components")
	}

	if len(doserComponentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.DoserComponents = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &doserComponentR{}
			}
			foreign.R.Pump = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.PumpID {
				local.R.DoserComponents = append(local.R.DoserComponents, foreign)
				if foreign.R == nil {
					foreign.R = &doserComponentR{}
				}
				foreign.R.Pump = local
				break
			}
		}
	}

	return nil
}

// LoadDoses allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (pumpL) LoadDoses(ctx context.Context, e boil.ContextExecutor, singular bool, maybePump interface{}, mods queries.Applicator) error {
	var slice []*Pump
	var object *Pump

	if singular {
		object = maybePump.(*Pump)
	} else {
		slice = *maybePump.(*[]*Pump)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pumpR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pumpR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`doses`),
		qm.WhereIn(`doses.pump_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load doses")
	}

	var resultSlice []*Dose
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice doses")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on doses")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for doses")
	}

	if len(doseAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Doses = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &doseR{}
			}
			foreign.R.Pump = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.PumpID {
				local.R.Doses = append(local.R.Doses, foreign)
				if foreign.R == nil {
					foreign.R = &doseR{}
				}
				foreign.R.Pump = local
				break
			}
		}
	}

	return nil
}

// SetFirmatum of the pump to the related item.
// Sets o.R.Firmatum to related.
// Adds o to related.R.FirmatumPumps.
func (o *Pump) SetFirmatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Firmata) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"pumps\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"firmata_id"}),
		strmangle.WhereClause("\"", "\"", 0, pumpPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FirmataID = related.ID
	if o.R == nil {
		o.R = &pumpR{
			Firmatum: related,
		}
	} else {
		o.R.Firmatum = related
	}

	if related.R == nil {
		related.R = &firmataR{
			FirmatumPumps: PumpSlice{o},
		}
	} else {
		related.R.FirmatumPumps = append(related.R.FirmatumPumps, o)
	}

	return nil
}

// AddAutoTopOffs adds the given related objects to the existing relationships
// of the pump, optionally inserting them as new records.
// Appends related to o.R.AutoTopOffs.
// Sets related.R.Pump appropriately.
func (o *Pump) AddAutoTopOffs(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AutoTopOff) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PumpID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"auto_top_offs\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"pump_id"}),
				strmangle.WhereClause("\"", "\"", 0, autoTopOffPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PumpID = o.ID
		}
	}

	if o.R == nil {
		o.R = &pumpR{
			AutoTopOffs: related,
		}
	} else {
		o.R.AutoTopOffs = append(o.R.AutoTopOffs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &autoTopOffR{
				Pump: o,
			}
		} else {
			rel.R.Pump = o
		}
	}
	return nil
}

// AddWastePumpAutoWaterChanges adds the given related objects to the existing relationships
// of the pump, optionally inserting them as new records.
// Appends related to o.R.WastePumpAutoWaterChanges.
// Sets related.R.WastePump appropriately.
func (o *Pump) AddWastePumpAutoWaterChanges(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AutoWaterChange) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.WastePumpID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"auto_water_changes\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"waste_pump_id"}),
				strmangle.WhereClause("\"", "\"", 0, autoWaterChangePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.WastePumpID = o.ID
		}
	}

	if o.R == nil {
		o.R = &pumpR{
			WastePumpAutoWaterChanges: related,
		}
	} else {
		o.R.WastePumpAutoWaterChanges = append(o.R.WastePumpAutoWaterChanges, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &autoWaterChangeR{
				WastePump: o,
			}
		} else {
			rel.R.WastePump = o
		}
	}
	return nil
}

// AddFreshPumpAutoWaterChanges adds the given related objects to the existing relationships
// of the pump, optionally inserting them as new records.
// Appends related to o.R.FreshPumpAutoWaterChanges.
// Sets related.R.FreshPump appropriately.
func (o *Pump) AddFreshPumpAutoWaterChanges(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AutoWaterChange) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.FreshPumpID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"auto_water_changes\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"fresh_pump_id"}),
				strmangle.WhereClause("\"", "\"", 0, autoWaterChangePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.FreshPumpID = o.ID
		}
	}

	if o.R == nil {
		o.R = &pumpR{
			FreshPumpAutoWaterChanges: related,
		}
	} else {
		o.R.FreshPumpAutoWaterChanges = append(o.R.FreshPumpAutoWaterChanges, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &autoWaterChangeR{
				FreshPump: o,
			}
		} else {
			rel.R.FreshPump = o
		}
	}
	return nil
}

// AddCalibrations adds the given related objects to the existing relationships
// of the pump, optionally inserting them as new records.
// Appends related to o.R.Calibrations.
// Sets related.R.Pump appropriately.
func (o *Pump) AddCalibrations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Calibration) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PumpID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"calibrations\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"pump_id"}),
				strmangle.WhereClause("\"", "\"", 0, calibrationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PumpID = o.ID
		}
	}

	if o.R == nil {
		o.R = &pumpR{
			Calibrations: related,
		}
	} else {
		o.R.Calibrations = append(o.R.Calibrations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &calibrationR{
				Pump: o,
			}
		} else {
			rel.R.Pump = o
		}
	}
	return nil
}

// AddDoserComponents adds the given related objects to the existing relationships
// of the pump, optionally inserting them as new records.
// Appends related to o.R.DoserComponents.
// Sets related.R.Pump appropriately.
func (o *Pump) AddDoserComponents(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DoserComponent) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PumpID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"doser_components\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"pump_id"}),
				strmangle.WhereClause("\"", "\"", 0, doserComponentPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PumpID = o.ID
		}
	}

	if o.R == nil {
		o.R = &pumpR{
			DoserComponents: related,
		}
	} else {
		o.R.DoserComponents = append(o.R.DoserComponents, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &doserComponentR{
				Pump: o,
			}
		} else {
			rel.R.Pump = o
		}
	}
	return nil
}

// AddDoses adds the given related objects to the existing relationships
// of the pump, optionally inserting them as new records.
// Appends related to o.R.Doses.
// Sets related.R.Pump appropriately.
func (o *Pump) AddDoses(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Dose) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PumpID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"doses\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"pump_id"}),
				strmangle.WhereClause("\"", "\"", 0, dosePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PumpID = o.ID
		}
	}

	if o.R == nil {
		o.R = &pumpR{
			Doses: related,
		}
	} else {
		o.R.Doses = append(o.R.Doses, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &doseR{
				Pump: o,
			}
		} else {
			rel.R.Pump = o
		}
	}
	return nil
}

// Pumps retrieves all the records using an executor.
func Pumps(mods ...qm.QueryMod) pumpQuery {
	mods = append(mods, qm.From("\"pumps\""))
	return pumpQuery{NewQuery(mods...)}
}

// FindPump retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPump(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Pump, error) {
	pumpObj := &Pump{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"pumps\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, pumpObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from pumps")
	}

	return pumpObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Pump) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no pumps provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(pumpColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	pumpInsertCacheMut.RLock()
	cache, cached := pumpInsertCache[key]
	pumpInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			pumpAllColumns,
			pumpColumnsWithDefault,
			pumpColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(pumpType, pumpMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(pumpType, pumpMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"pumps\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"pumps\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT \"%s\" FROM \"pumps\" WHERE %s", strings.Join(returnColumns, "\",\""), strmangle.WhereClause("\"", "\"", 0, pumpPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into pumps")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for pumps")
	}

CacheNoHooks:
	if !cached {
		pumpInsertCacheMut.Lock()
		pumpInsertCache[key] = cache
		pumpInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Pump.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Pump) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	pumpUpdateCacheMut.RLock()
	cache, cached := pumpUpdateCache[key]
	pumpUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			pumpAllColumns,
			pumpPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update pumps, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"pumps\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, pumpPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(pumpType, pumpMapping, append(wl, pumpPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update pumps row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for pumps")
	}

	if !cached {
		pumpUpdateCacheMut.Lock()
		pumpUpdateCache[key] = cache
		pumpUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q pumpQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for pumps")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for pumps")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PumpSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pumpPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"pumps\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, pumpPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in pump slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all pump")
	}
	return rowsAff, nil
}

// Delete deletes a single Pump record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Pump) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Pump provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), pumpPrimaryKeyMapping)
	sql := "DELETE FROM \"pumps\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from pumps")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for pumps")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q pumpQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no pumpQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from pumps")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for pumps")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PumpSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(pumpBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pumpPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"pumps\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, pumpPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from pump slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for pumps")
	}

	if len(pumpAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Pump) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPump(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PumpSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PumpSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pumpPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"pumps\".* FROM \"pumps\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, pumpPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PumpSlice")
	}

	*o = slice

	return nil
}

// PumpExists checks if the Pump row exists.
func PumpExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"pumps\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if pumps exists")
	}

	return exists, nil
}

// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Calibration is an object representing the database table.
type Calibration struct {
	ID             string  `boil:"id" json:"id" toml:"id" yaml:"id"`
	PumpID         string  `boil:"pump_id" json:"pump_id" toml:"pump_id" yaml:"pump_id"`
	TargetVolume   float64 `boil:"target_volume" json:"target_volume" toml:"target_volume" yaml:"target_volume"`
	MeasuredVolume float64 `boil:"measured_volume" json:"measured_volume" toml:"measured_volume" yaml:"measured_volume"`

	R *calibrationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L calibrationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CalibrationColumns = struct {
	ID             string
	PumpID         string
	TargetVolume   string
	MeasuredVolume string
}{
	ID:             "id",
	PumpID:         "pump_id",
	TargetVolume:   "target_volume",
	MeasuredVolume: "measured_volume",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperfloat64 struct{ field string }

func (w whereHelperfloat64) EQ(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperfloat64) NEQ(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperfloat64) LT(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperfloat64) LTE(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperfloat64) GT(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperfloat64) GTE(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperfloat64) IN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperfloat64) NIN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var CalibrationWhere = struct {
	ID             whereHelperstring
	PumpID         whereHelperstring
	TargetVolume   whereHelperfloat64
	MeasuredVolume whereHelperfloat64
}{
	ID:             whereHelperstring{field: "\"calibrations\".\"id\""},
	PumpID:         whereHelperstring{field: "\"calibrations\".\"pump_id\""},
	TargetVolume:   whereHelperfloat64{field: "\"calibrations\".\"target_volume\""},
	MeasuredVolume: whereHelperfloat64{field: "\"calibrations\".\"measured_volume\""},
}

// CalibrationRels is where relationship names are stored.
var CalibrationRels = struct {
	Pump string
}{
	Pump: "Pump",
}

// calibrationR is where relationships are stored.
type calibrationR struct {
	Pump *Pump `boil:"Pump" json:"Pump" toml:"Pump" yaml:"Pump"`
}

// NewStruct creates a new relationship struct
func (*calibrationR) NewStruct() *calibrationR {
	return &calibrationR{}
}

// calibrationL is where Load methods for each relationship are stored.
type calibrationL struct{}

var (
	calibrationAllColumns            = []string{"id", "pump_id", "target_volume", "measured_volume"}
	calibrationColumnsWithoutDefault = []string{"id", "pump_id", "target_volume", "measured_volume"}
	calibrationColumnsWithDefault    = []string{}
	calibrationPrimaryKeyColumns     = []string{"id"}
)

type (
	// CalibrationSlice is an alias for a slice of pointers to Calibration.
	// This should generally be used opposed to []Calibration.
	CalibrationSlice []*Calibration
	// CalibrationHook is the signature for custom Calibration hook methods
	CalibrationHook func(context.Context, boil.ContextExecutor, *Calibration) error

	calibrationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	calibrationType                 = reflect.TypeOf(&Calibration{})
	calibrationMapping              = queries.MakeStructMapping(calibrationType)
	calibrationPrimaryKeyMapping, _ = queries.BindMapping(calibrationType, calibrationMapping, calibrationPrimaryKeyColumns)
	calibrationInsertCacheMut       sync.RWMutex
	calibrationInsertCache          = make(map[string]insertCache)
	calibrationUpdateCacheMut       sync.RWMutex
	calibrationUpdateCache          = make(map[string]updateCache)
	calibrationUpsertCacheMut       sync.RWMutex
	calibrationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var calibrationBeforeInsertHooks []CalibrationHook
var calibrationBeforeUpdateHooks []CalibrationHook
var calibrationBeforeDeleteHooks []CalibrationHook
var calibrationBeforeUpsertHooks []CalibrationHook

var calibrationAfterInsertHooks []CalibrationHook
var calibrationAfterSelectHooks []CalibrationHook
var calibrationAfterUpdateHooks []CalibrationHook
var calibrationAfterDeleteHooks []CalibrationHook
var calibrationAfterUpsertHooks []CalibrationHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Calibration) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range calibrationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Calibration) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range calibrationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Calibration) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range calibrationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Calibration) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range calibrationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Calibration) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range calibrationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Calibration) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range calibrationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Calibration) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range calibrationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Calibration) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range calibrationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Calibration) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range calibrationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCalibrationHook registers your hook function for all future operations.
func AddCalibrationHook(hookPoint boil.HookPoint, calibrationHook CalibrationHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		calibrationBeforeInsertHooks = append(calibrationBeforeInsertHooks, calibrationHook)
	case boil.BeforeUpdateHook:
		calibrationBeforeUpdateHooks = append(calibrationBeforeUpdateHooks, calibrationHook)
	case boil.BeforeDeleteHook:
		calibrationBeforeDeleteHooks = append(calibrationBeforeDeleteHooks, calibrationHook)
	case boil.BeforeUpsertHook:
		calibrationBeforeUpsertHooks = append(calibrationBeforeUpsertHooks, calibrationHook)
	case boil.AfterInsertHook:
		calibrationAfterInsertHooks = append(calibrationAfterInsertHooks, calibrationHook)
	case boil.AfterSelectHook:
		calibrationAfterSelectHooks = append(calibrationAfterSelectHooks, calibrationHook)
	case boil.AfterUpdateHook:
		calibrationAfterUpdateHooks = append(calibrationAfterUpdateHooks, calibrationHook)
	case boil.AfterDeleteHook:
		calibrationAfterDeleteHooks = append(calibrationAfterDeleteHooks, calibrationHook)
	case boil.AfterUpsertHook:
		calibrationAfterUpsertHooks = append(calibrationAfterUpsertHooks, calibrationHook)
	}
}

// One returns a single calibration record from the query.
func (q calibrationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Calibration, error) {
	o := &Calibration{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for calibrations")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Calibration records from the query.
func (q calibrationQuery) All(ctx context.Context, exec boil.ContextExecutor) (CalibrationSlice, error) {
	var o []*Calibration

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Calibration slice")
	}

	if len(calibrationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Calibration records in the query.
func (q calibrationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count calibrations rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q calibrationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if calibrations exists")
	}

	return count > 0, nil
}

// Pump pointed to by the foreign key.
func (o *Calibration) Pump(mods ...qm.QueryMod) pumpQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PumpID),
	}

	queryMods = append(queryMods, mods...)

	query := Pumps(queryMods...)
	queries.SetFrom(query.Query, "\"pumps\"")

	return query
}

// LoadPump allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (calibrationL) LoadPump(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCalibration interface{}, mods queries.Applicator) error {
	var slice []*Calibration
	var object *Calibration

	if singular {
		object = maybeCalibration.(*Calibration)
	} else {
		slice = *maybeCalibration.(*[]*Calibration)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &calibrationR{}
		}
		args = append(args, object.PumpID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &calibrationR{}
			}

			for _, a := range args {
				if a == obj.PumpID {
					continue Outer
				}
			}

			args = append(args, obj.PumpID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`pumps`),
		qm.WhereIn(`pumps.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Pump")
	}

	var resultSlice []*Pump
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Pump")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for pumps")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for pumps")
	}

	if len(calibrationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Pump = foreign
		if foreign.R == nil {
			foreign.R = &pumpR{}
		}
		foreign.R.Calibrations = append(foreign.R.Calibrations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PumpID == foreign.ID {
				local.R.Pump = foreign
				if foreign.R == nil {
					foreign.R = &pumpR{}
				}
				foreign.R.Calibrations = append(foreign.R.Calibrations, local)
				break
			}
		}
	}

	return nil
}

// SetPump of the calibration to the related item.
// Sets o.R.Pump to related.
// Adds o to related.R.Calibrations.
func (o *Calibration) SetPump(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Pump) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"calibrations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"pump_id"}),
		strmangle.WhereClause("\"", "\"", 0, calibrationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PumpID = related.ID
	if o.R == nil {
		o.R = &calibrationR{
			Pump: related,
		}
	} else {
		o.R.Pump = related
	}

	if related.R == nil {
		related.R = &pumpR{
			Calibrations: CalibrationSlice{o},
		}
	} else {
		related.R.Calibrations = append(related.R.Calibrations, o)
	}

	return nil
}

// Calibrations retrieves all the records using an executor.
func Calibrations(mods ...qm.QueryMod) calibrationQuery {
	mods = append(mods, qm.From("\"calibrations\""))
	return calibrationQuery{NewQuery(mods...)}
}

// FindCalibration retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCalibration(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Calibration, error) {
	calibrationObj := &Calibration{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"calibrations\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, calibrationObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from calibrations")
	}

	return calibrationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Calibration) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no calibrations provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(calibrationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	calibrationInsertCacheMut.RLock()
	cache, cached := calibrationInsertCache[key]
	calibrationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			calibrationAllColumns,
			calibrationColumnsWithDefault,
			calibrationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(calibrationType, calibrationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(calibrationType, calibrationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"calibrations\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"calibrations\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT \"%s\" FROM \"calibrations\" WHERE %s", strings.Join(returnColumns, "\",\""), strmangle.WhereClause("\"", "\"", 0, calibrationPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into calibrations")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for calibrations")
	}

CacheNoHooks:
	if !cached {
		calibrationInsertCacheMut.Lock()
		calibrationInsertCache[key] = cache
		calibrationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Calibration.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Calibration) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	calibrationUpdateCacheMut.RLock()
	cache, cached := calibrationUpdateCache[key]
	calibrationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			calibrationAllColumns,
			calibrationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update calibrations, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"calibrations\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, calibrationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(calibrationType, calibrationMapping, append(wl, calibrationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update calibrations row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for calibrations")
	}

	if !cached {
		calibrationUpdateCacheMut.Lock()
		calibrationUpdateCache[key] = cache
		calibrationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q calibrationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for calibrations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for calibrations")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CalibrationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), calibrationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"calibrations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, calibrationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in calibration slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all calibration")
	}
	return rowsAff, nil
}

// Delete deletes a single Calibration record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Calibration) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Calibration provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), calibrationPrimaryKeyMapping)
	sql := "DELETE FROM \"calibrations\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from calibrations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for calibrations")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q calibrationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no calibrationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from calibrations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for calibrations")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CalibrationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(calibrationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), calibrationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"calibrations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, calibrationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from calibration slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for calibrations")
	}

	if len(calibrationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Calibration) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCalibration(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CalibrationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CalibrationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), calibrationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"calibrations\".* FROM \"calibrations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, calibrationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CalibrationSlice")
	}

	*o = slice

	return nil
}

// CalibrationExists checks if the Calibration row exists.
func CalibrationExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"calibrations\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if calibrations exists")
	}

	return exists, nil
}

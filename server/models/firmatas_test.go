// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testFirmatas(t *testing.T) {
	t.Parallel()

	query := Firmatas()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testFirmatasDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Firmata{}
	if err = randomize.Struct(seed, o, firmataDBTypes, true, firmataColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Firmata struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Firmatas().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFirmatasQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Firmata{}
	if err = randomize.Struct(seed, o, firmataDBTypes, true, firmataColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Firmata struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Firmatas().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Firmatas().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFirmatasSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Firmata{}
	if err = randomize.Struct(seed, o, firmataDBTypes, true, firmataColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Firmata struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := FirmataSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Firmatas().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFirmatasExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Firmata{}
	if err = randomize.Struct(seed, o, firmataDBTypes, true, firmataColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Firmata struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := FirmataExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Firmata exists: %s", err)
	}
	if !e {
		t.Errorf("Expected FirmataExists to return true, but got false.")
	}
}

func testFirmatasFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Firmata{}
	if err = randomize.Struct(seed, o, firmataDBTypes, true, firmataColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Firmata struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	firmataFound, err := FindFirmata(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if firmataFound == nil {
		t.Error("want a record, got nil")
	}
}

func testFirmatasBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Firmata{}
	if err = randomize.Struct(seed, o, firmataDBTypes, true, firmataColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Firmata struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Firmatas().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testFirmatasOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Firmata{}
	if err = randomize.Struct(seed, o, firmataDBTypes, true, firmataColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Firmata struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Firmatas().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testFirmatasAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	firmataOne := &Firmata{}
	firmataTwo := &Firmata{}
	if err = randomize.Struct(seed, firmataOne, firmataDBTypes, false, firmataColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Firmata struct: %s", err)
	}
	if err = randomize.Struct(seed, firmataTwo, firmataDBTypes, false, firmataColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Firmata struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = firmataOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = firmataTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Firmatas().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testFirmatasCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	firmataOne := &Firmata{}
	firmataTwo := &Firmata{}
	if err = randomize.Struct(seed, firmataOne, firmataDBTypes, false, firmataColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Firmata struct: %s", err)
	}
	if err = randomize.Struct(seed, firmataTwo, firmataDBTypes, false, firmataColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Firmata struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = firmataOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = firmataTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Firmatas().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func firmataBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Firmata) error {
	*o = Firmata{}
	return nil
}

func firmataAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Firmata) error {
	*o = Firmata{}
	return nil
}

func firmataAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Firmata) error {
	*o = Firmata{}
	return nil
}

func firmataBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Firmata) error {
	*o = Firmata{}
	return nil
}

func firmataAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Firmata) error {
	*o = Firmata{}
	return nil
}

func firmataBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Firmata) error {
	*o = Firmata{}
	return nil
}

func firmataAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Firmata) error {
	*o = Firmata{}
	return nil
}

func firmataBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Firmata) error {
	*o = Firmata{}
	return nil
}

func firmataAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Firmata) error {
	*o = Firmata{}
	return nil
}

func testFirmatasHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Firmata{}
	o := &Firmata{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, firmataDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Firmata object: %s", err)
	}

	AddFirmataHook(boil.BeforeInsertHook, firmataBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	firmataBeforeInsertHooks = []FirmataHook{}

	AddFirmataHook(boil.AfterInsertHook, firmataAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	firmataAfterInsertHooks = []FirmataHook{}

	AddFirmataHook(boil.AfterSelectHook, firmataAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	firmataAfterSelectHooks = []FirmataHook{}

	AddFirmataHook(boil.BeforeUpdateHook, firmataBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	firmataBeforeUpdateHooks = []FirmataHook{}

	AddFirmataHook(boil.AfterUpdateHook, firmataAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	firmataAfterUpdateHooks = []FirmataHook{}

	AddFirmataHook(boil.BeforeDeleteHook, firmataBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	firmataBeforeDeleteHooks = []FirmataHook{}

	AddFirmataHook(boil.AfterDeleteHook, firmataAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	firmataAfterDeleteHooks = []FirmataHook{}

	AddFirmataHook(boil.BeforeUpsertHook, firmataBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	firmataBeforeUpsertHooks = []FirmataHook{}

	AddFirmataHook(boil.AfterUpsertHook, firmataAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	firmataAfterUpsertHooks = []FirmataHook{}
}

func testFirmatasInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Firmata{}
	if err = randomize.Struct(seed, o, firmataDBTypes, true, firmataColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Firmata struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Firmatas().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testFirmatasInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Firmata{}
	if err = randomize.Struct(seed, o, firmataDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Firmata struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(firmataColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Firmatas().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testFirmataToManyFirmatumPumps(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Firmata
	var b, c Pump

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, firmataDBTypes, true, firmataColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Firmata struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, pumpDBTypes, false, pumpColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, pumpDBTypes, false, pumpColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.FirmataID = a.ID
	c.FirmataID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.FirmatumPumps().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.FirmataID == b.FirmataID {
			bFound = true
		}
		if v.FirmataID == c.FirmataID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := FirmataSlice{&a}
	if err = a.L.LoadFirmatumPumps(ctx, tx, false, (*[]*Firmata)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.FirmatumPumps); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.FirmatumPumps = nil
	if err = a.L.LoadFirmatumPumps(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.FirmatumPumps); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testFirmataToManyFirmatumWaterLevelSensors(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Firmata
	var b, c WaterLevelSensor

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, firmataDBTypes, true, firmataColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Firmata struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, waterLevelSensorDBTypes, false, waterLevelSensorColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, waterLevelSensorDBTypes, false, waterLevelSensorColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.FirmataID = a.ID
	c.FirmataID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.FirmatumWaterLevelSensors().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.FirmataID == b.FirmataID {
			bFound = true
		}
		if v.FirmataID == c.FirmataID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := FirmataSlice{&a}
	if err = a.L.LoadFirmatumWaterLevelSensors(ctx, tx, false, (*[]*Firmata)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.FirmatumWaterLevelSensors); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.FirmatumWaterLevelSensors = nil
	if err = a.L.LoadFirmatumWaterLevelSensors(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.FirmatumWaterLevelSensors); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testFirmataToManyAddOpFirmatumPumps(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Firmata
	var b, c, d, e Pump

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, firmataDBTypes, false, strmangle.SetComplement(firmataPrimaryKeyColumns, firmataColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Pump{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, pumpDBTypes, false, strmangle.SetComplement(pumpPrimaryKeyColumns, pumpColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Pump{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddFirmatumPumps(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.FirmataID {
			t.Error("foreign key was wrong value", a.ID, first.FirmataID)
		}
		if a.ID != second.FirmataID {
			t.Error("foreign key was wrong value", a.ID, second.FirmataID)
		}

		if first.R.Firmatum != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Firmatum != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.FirmatumPumps[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.FirmatumPumps[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.FirmatumPumps().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testFirmataToManyAddOpFirmatumWaterLevelSensors(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Firmata
	var b, c, d, e WaterLevelSensor

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, firmataDBTypes, false, strmangle.SetComplement(firmataPrimaryKeyColumns, firmataColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*WaterLevelSensor{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, waterLevelSensorDBTypes, false, strmangle.SetComplement(waterLevelSensorPrimaryKeyColumns, waterLevelSensorColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*WaterLevelSensor{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddFirmatumWaterLevelSensors(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.FirmataID {
			t.Error("foreign key was wrong value", a.ID, first.FirmataID)
		}
		if a.ID != second.FirmataID {
			t.Error("foreign key was wrong value", a.ID, second.FirmataID)
		}

		if first.R.Firmatum != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Firmatum != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.FirmatumWaterLevelSensors[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.FirmatumWaterLevelSensors[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.FirmatumWaterLevelSensors().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testFirmatasReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Firmata{}
	if err = randomize.Struct(seed, o, firmataDBTypes, true, firmataColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Firmata struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testFirmatasReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Firmata{}
	if err = randomize.Struct(seed, o, firmataDBTypes, true, firmataColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Firmata struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := FirmataSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testFirmatasSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Firmata{}
	if err = randomize.Struct(seed, o, firmataDBTypes, true, firmataColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Firmata struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Firmatas().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	firmataDBTypes = map[string]string{`ID`: `UUID`, `SerialPort`: `TEXT`}
	_              = bytes.MinRead
)

func testFirmatasUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(firmataPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(firmataAllColumns) == len(firmataPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Firmata{}
	if err = randomize.Struct(seed, o, firmataDBTypes, true, firmataColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Firmata struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Firmatas().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, firmataDBTypes, true, firmataPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Firmata struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testFirmatasSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(firmataAllColumns) == len(firmataPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Firmata{}
	if err = randomize.Struct(seed, o, firmataDBTypes, true, firmataColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Firmata struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Firmatas().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, firmataDBTypes, true, firmataPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Firmata struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(firmataAllColumns, firmataPrimaryKeyColumns) {
		fields = firmataAllColumns
	} else {
		fields = strmangle.SetComplement(
			firmataAllColumns,
			firmataPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := FirmataSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

# TODO: Human-readable names for resources

schema {
  query: Query
  mutation: Mutation
}

type Query {
  firmatas: [Firmata!]
  pumps: [Pump!]
  water_level_sensors: [WaterLevelSensor!]
  auto_top_offs: [AutoTopOff!]
  auto_top_off(id: ID!): AutoTopOff
  auto_water_changes: [AutoWaterChange!]
  auto_water_change(id: ID!): AutoWaterChange
  dosers: [Doser!]
}

# Firmata microcontroller device configuration
type Firmata {
  id: ID!
  # A human-readable description of the firmata
  name: String
  pumps: [Pump!]

  # The serial port on the host system, ie /dev/tty...
  serial_port: String!
  # The serial connection baud rate to use
  baud: Int!
}

# A pump driven via the AccelStepperFirmata protocol
type Pump {
  id: ID!
  # A human-readable description of the pump
  name: String
  firmata: Firmata!
  # The device ID used for controlling firmata
  device_id: Int!
  # The pin to use for the step signal
  step_pin: Int!
  # The pin to use for the engage signal, if used
  en_pin: Int
  # The pump's volume calibration
  calibration: TwoPointCalibration
  # Acceleration to use when changing pump speed, in steps/s/s
  acceleration: Float
  history: [Dose!]
}

type Dose {
  timestamp: Int!
  volume: Float!
  message: String
}

type TwoPointCalibration {
  # The number of steps pumped for the calibration run
  steps: Int!
  # The volume measured after the calibration run in mL
  volume: Float!
}

enum SensorKind {
  # High-water level sensor
  HIGH
  # Alert sensor
  ALERT
}

type WaterLevelSensor {
  id: ID!
  # A human-readable description of the sensor
  name: String
  # If present, the sensor is assumed to be attached to a firmata device
  firmata_id: ID
  # The pin to use for the sensor. 
  # The pin is assumed to be a digital input. A HIGH value indicates the
  # presence of water.
  # 
  # The pin number refers to the pinout number, and is in the range 1-40
  # Unfortunately, the Arduino shield labels these pins using the GPIO*
  # values. Executing `pinout` on the rPi will provide a mapping between
  # pins and labels.
  pin: Int!
  # The kind of sensor
  kind: SensorKind!
  water_detected: Boolean!
  # If present, the configured pin is assumed to be an analog input. Water 
  # is detected if the pin's voltage is greater than the given value
  detection_threshold: Int
  # If true, invert the sensor, or negate the sensor's value if detection_threshold is set
  invert: Boolean
}

type AutoTopOff {
  id: ID!
  # A human-readable description of the ATO
  name: String
  pump: Pump!
  # Water level sensors to use when topping off.
  # Sensors of kind LOW will trigger an top off run if their value changes from HIGH to LOW
  # Sensors of kind HIGH will terminate a top off run when their value chagnes from LOW to HIGH
  # Sensors of kind ALERT will terminate a top off run and cause an alert if their value chagnes from LOW to HIGH
  level_sensors: [WaterLevelSensor!]!
  # The rate in mL/min to pump during top off runs
  fill_rate: Float!
  # The interval in minutes between scheduled top off runs.
  fill_interval: Int!
  # The maximum volume in mL to fill in a single run.
  # Causes an alert if this volume is exceeded
  max_fill_volume: Float
  enabled: Boolean!

  events: [AtoEvent!]
  # Window specifies the number of seconds over which to compute rates. 
  # Defaults to 3600 (1 hour)
  rate(window: Int): [AtoRate!]
}

type AtoRate {
  timestamp: Int!
  # Top-off rate in mL/h
  rate: Float!
}

type AutoWaterChange {
  id: ID!
  # A human-readable description of the AWC
  name: String
  fresh_pump: Pump!
  waste_pump: Pump!
  # The rate in L/day to exchange (each pump will deliver this many liters each day)
  exchange_rate: Float!
  enabled: Boolean!

  events: [AwcEvent!]
}

type Doser {
  id: ID!
  # A human-readable description of the doser
  name: String
  components: [DoserComponent!]
  enabled: Boolean!
}

type DoserComponent {
  pump: Pump!
  # The rate to dose in mL/day
  dose_rate: Float!
}

type AtoEvent {
  id: ID!
  timestamp: Int!
  kind: String!
  data: String!
}

type AwcEvent {
  id: ID!
  timestamp: Int!
  kind: String!
  data: String!
}

type Mutation {
  createFirmata(serial_port: String!, baud: Int!, name: String): Firmata!
  deleteFirmata(id: ID!): Boolean!

  createPump(firmata_id: ID!, device_ID: Int!, step_pin: Int!, dir_pin: Int, en_pin: Int, acceleration: Float, name: String): Pump!
  updatePump(id: ID!, firmata_id: ID!, device_ID: Int!, step_pin: Int!, dir_pin: Int, en_pin: Int, acceleration: Float, name: String): Pump!
  deletePump(id: ID!): Boolean!

  calibratePump(pump_id: ID!, steps: Int!, volume: Float!): TwoPointCalibration!

  createWaterLevelSensor(pin: Int!, kind: SensorKind!, firmata_id: ID, detection_threshold: Int, invert: Boolean!, name: String, ): WaterLevelSensor!
  updateWaterLevelSensor(id: ID!, pin: Int!, kind: SensorKind!, firmata_id: ID, detection_threshold: Int, invert: Boolean!, name: String): WaterLevelSensor!
  deleteWaterLevelSensor(id: ID!): Boolean!

  createAutoTopOff(pump_id: ID!, level_sensors: [ID!]!, fill_rate: Float!, fill_interval: Int!, max_fill_volume: Float!, name: String): AutoTopOff!
  updateAutoTopOff(id: ID!, pump_id: ID!, level_sensors: [ID!]!, fill_rate: Float!, fill_interval: Int!, max_fill_volume: Float!, name: String): AutoTopOff!
  deleteAutoTopOff(id: ID!): Boolean!
  setAutoTopOffEnabled(id: ID!, enabled: Boolean!): Boolean!

  createAutoWaterChange(fresh_pump_id: ID!, waste_pump_id: ID!, exchange_rate: Float!, name: String): AutoWaterChange!
  updateAutoWaterChange(id: ID!, fresh_pump_id: ID!, waste_pump_id: ID!, exchange_rate: Float!, name: String): AutoWaterChange!
  deleteAutoWaterChange(id: ID!): Boolean!
  setAutoWaterChangeEnabled(id: ID!, enabled: Boolean!): Boolean!

  createDoser(input: DoserInput!, name: String): Doser!
  deleteDoser(id: ID!): Boolean!
  setDoserEnabled(id: ID!, enabled: Boolean!): Boolean!

  pump(pump_id: ID!, steps: Int!, speed: Float!): Boolean!
}

input DoserInput {
  components: [DoserComponentInput!]!
}

input DoserComponentInput {
  pump_id: ID!
  dose_rate: Float!
}
